{"version":3,"file":"ej2-angular-richtexteditor.umd.min.js","sources":["~/@syncfusion/ej2-angular-richtexteditor/src/rich-text-editor/richtexteditor.component.ts","~/@syncfusion/ej2-angular-richtexteditor/src/rich-text-editor/richtexteditor.module.ts","~/@syncfusion/ej2-angular-richtexteditor/src/rich-text-editor/richtexteditor-all.module.ts"],"sourcesContent":["import { Component, ElementRef, ViewContainerRef, ValueProvider, Renderer2, Injector, ChangeDetectionStrategy, forwardRef, ContentChild } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, FormBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { RichTextEditor } from '@syncfusion/ej2-richtexteditor';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nexport const /** @type {?} */ inputs: string[] = ['backgroundColor','cssClass','editorMode','enableHtmlEncode','enablePersistence','enableRtl','enableTabKey','enabled','floatingToolbarOffset','fontColor','fontFamily','fontSize','format','formatter','height','htmlAttributes','iframeSettings','inlineMode','insertImageSettings','keyConfig','locale','maxLength','pasteCleanupSettings','placeholder','quickToolbarSettings','readonly','saveInterval','showCharCount','tableSettings','toolbarSettings','undoRedoSteps','undoRedoTimer','value','valueTemplate','width'];\nexport const /** @type {?} */ outputs: string[] = ['actionBegin','actionComplete','blur','change','created','destroyed','focus','resizeStart','resizeStop','resizing','toolbarClick','valueChange'];\nexport const /** @type {?} */ twoWays: string[] = ['value'];\n/**\n * `ejs-richtexteditor` represents the Angular richtexteditor Component.\n * ```html\n * <ejs-richtexteditor></ejs-richtexteditor>\n * ```\n */\n@ComponentMixins([ComponentBase, FormBase])\nexport class RichTextEditorComponent extends RichTextEditor implements IComponentBase {\npublic valueChange: any;\n/**\n * Accepts the template design and assigns it as RichTextEditor’s content. \n * The built-in template engine which provides options to compile template string into a executable function. \n * For EX: We have expression evolution as like ES6 expression string literals\n * \\@default null\n */\n@Template()\n    public valueTemplate: any;\nprivate skipFromEvent:boolean = true;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('RichTextEditorToolbar');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('RichTextEditorLink');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('RichTextEditorImage');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('RichTextEditorCount');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('RichTextEditorQuickToolbar');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('RichTextEditorHtmlEditor');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('RichTextEditorMarkdownEditor');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('RichTextEditorTable');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('RichTextEditorPasteCleanup');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n    }\n/**\n * @param {?} registerFunction\n * @return {?}\n */\npublic registerOnChange(registerFunction: (_: any) => void): void {\n    }\n/**\n * @param {?} registerFunction\n * @return {?}\n */\npublic registerOnTouched(registerFunction: () => void): void {\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic writeValue(value: any): void {\n    }\n/**\n * @param {?} disabled\n * @return {?}\n */\npublic setDisabledState(disabled: boolean): void {\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-richtexteditor',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => RichTextEditorComponent),\n            multi: true\n        }\n    ],\n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'valueTemplate': [{ type: ContentChild, args: ['valueTemplate', ] },],\n};\n}\n\nfunction RichTextEditorComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nRichTextEditorComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRichTextEditorComponent.ctorParameters;\n/** @type {?} */\nRichTextEditorComponent.propDecorators;\n/** @type {?} */\nRichTextEditorComponent.prototype.valueChange;\n/**\n * Accepts the template design and assigns it as RichTextEditor’s content. \n * The built-in template engine which provides options to compile template string into a executable function. \n * For EX: We have expression evolution as like ES6 expression string literals\n * \\@default null\n * @type {?}\n */\nRichTextEditorComponent.prototype.valueTemplate;\n/** @type {?} */\nRichTextEditorComponent.prototype.skipFromEvent;\n/** @type {?} */\nRichTextEditorComponent.prototype.registerEvents;\n/** @type {?} */\nRichTextEditorComponent.prototype.addTwoWay;\n/** @type {?} */\nRichTextEditorComponent.prototype.ngEle;\n/** @type {?} */\nRichTextEditorComponent.prototype.srenderer;\n/** @type {?} */\nRichTextEditorComponent.prototype.viewContainerRef;\n/** @type {?} */\nRichTextEditorComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RichTextEditorComponent } from './richtexteditor.component';\n/**\n * NgModule definition for the RichTextEditor component.\n */\nexport class RichTextEditorModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        RichTextEditorComponent\n    ],\n    exports: [\n        RichTextEditorComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RichTextEditorModule_tsickle_Closure_declarations() {\n/** @type {?} */\nRichTextEditorModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRichTextEditorModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RichTextEditorComponent } from './richtexteditor.component';\nimport { RichTextEditorModule } from './richtexteditor.module';\nimport {Toolbar, Link, Image, Count, QuickToolbar, HtmlEditor, MarkdownEditor, Table, PasteCleanup} from '@syncfusion/ej2-richtexteditor';\n\n\nexport const /** @type {?} */ ToolbarService: ValueProvider = { provide: 'RichTextEditorToolbar', useValue: Toolbar};\nexport const /** @type {?} */ LinkService: ValueProvider = { provide: 'RichTextEditorLink', useValue: Link};\nexport const /** @type {?} */ ImageService: ValueProvider = { provide: 'RichTextEditorImage', useValue: Image};\nexport const /** @type {?} */ CountService: ValueProvider = { provide: 'RichTextEditorCount', useValue: Count};\nexport const /** @type {?} */ QuickToolbarService: ValueProvider = { provide: 'RichTextEditorQuickToolbar', useValue: QuickToolbar};\nexport const /** @type {?} */ HtmlEditorService: ValueProvider = { provide: 'RichTextEditorHtmlEditor', useValue: HtmlEditor};\nexport const /** @type {?} */ MarkdownEditorService: ValueProvider = { provide: 'RichTextEditorMarkdownEditor', useValue: MarkdownEditor};\nexport const /** @type {?} */ TableService: ValueProvider = { provide: 'RichTextEditorTable', useValue: Table};\nexport const /** @type {?} */ PasteCleanupService: ValueProvider = { provide: 'RichTextEditorPasteCleanup', useValue: PasteCleanup};\n/**\n * NgModule definition for the RichTextEditor component with providers.\n */\nexport class RichTextEditorAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, RichTextEditorModule],\n    exports: [\n        RichTextEditorModule\n    ],\n    providers:[\n        ToolbarService,\n        LinkService,\n        ImageService,\n        CountService,\n        QuickToolbarService,\n        HtmlEditorService,\n        MarkdownEditorService,\n        TableService,\n        PasteCleanupService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RichTextEditorAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nRichTextEditorAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRichTextEditorAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["inputs","outputs","twoWays","exports","RichTextEditorComponent","RichTextEditorComponent_1","_super","ngEle","srenderer","viewContainerRef","injector","_this","call","this","skipFromEvent","element","nativeElement","injectedModules","mod","get","indexOf","push","_a","_b","_c","_d","_e","_f","_g","_h","_j","registerEvents","addTwoWay","setValue","__extends","prototype","registerOnChange","registerFunction","registerOnTouched","writeValue","value","setDisabledState","disabled","ngOnInit","ngAfterViewInit","ngOnDestroy","ngAfterContentChecked","RichTextEditor","decorators","type","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","queries","ctorParameters","ElementRef","Renderer2","ViewContainerRef","Injector","propDecorators","valueTemplate","ContentChild","__decorate","Template","ComponentMixins","ComponentBase","FormBase","__metadata","RichTextEditorModule","NgModule","imports","CommonModule","declarations","ToolbarService","useValue","Toolbar","LinkService","Link","ImageService","Image","CountService","Count","QuickToolbarService","QuickToolbar","HtmlEditorService","HtmlEditor","MarkdownEditorService","MarkdownEditor","TableService","Table","PasteCleanupService","PasteCleanup","RichTextEditorAllModule"],"mappings":"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"}
