{"version":3,"file":"dropzone.interfaces.js","sourceRoot":"","sources":["../../src/lib/dropzone.interfaces.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const DROPZONE_CONFIG = new InjectionToken('DROPZONE_CONFIG');\n\nexport type DropzoneEvent = 'error' | 'success' | 'sending' | 'canceled' | 'complete' |\n  'processing' | 'drop' | 'dragStart' | 'dragEnd' | 'dragEnter' | 'dragOver' | 'dragLeave' |\n  'thumbnail' | 'addedFile' | 'removedFile' | 'uploadProgress' | 'maxFilesReached' |\n  'maxFilesExceeded' | 'successMultiple' | 'sendingMultiple' | 'canceledMultiple' |\n  'completeMultiple' | 'processingMultiple' | 'reset' | 'queueComplete' | 'totalUploadProgress';\n\nexport const DropzoneEvents: DropzoneEvent[] = [\n  'error',\n  'success',\n  'sending',\n  'canceled',\n  'complete',\n  'processing',\n\n  'drop',\n  'dragStart',\n  'dragEnd',\n  'dragEnter',\n  'dragOver',\n  'dragLeave',\n\n  'thumbnail',\n  'addedFile',\n  'removedFile',\n  'uploadProgress',\n  'maxFilesReached',\n  'maxFilesExceeded',\n\n  'successMultiple',\n  'sendingMultiple',\n  'canceledMultiple',\n  'completeMultiple',\n  'processingMultiple',\n\n  'reset',\n  'queueComplete',\n  'totalUploadProgress'\n];\n\nexport interface DropzoneConfigInterface {\n  timeout?: number,\n\n  autoReset?: number | null,\n  errorReset?: number | null,\n  cancelReset?: number | null,\n\n  url?: string | DropzoneUrlFunction,\n  method?: string | DropzoneMethodFunction,\n\n  params?: any | DropzoneParamsFunction,\n  headers?: any | DropzoneHeadersFunction,\n\n  init?: DropzoneInitFunction,\n  accept?: DropzoneAcceptFunction,\n  resize?: DropzoneResizeFunction,\n  fallback?: DropzoneFallbackFunction,\n  renameFile?: DropzoneRenameFileFunction,\n  transformFile?: DropzoneTransformFileFunction,\n  chunksUploaded?: DropzoneChunksUploadedFunction,\n\n  withCredentials?: boolean,\n\n  previewsContainer?: any,\n  hiddenInputContainer?: any,\n\n  clickable?: string | string[] | boolean,\n  paramName?: any,\n  capture?: string,\n  maxFiles?: number,\n  maxFilesize?: number,\n  filesizeBase?: number,\n  acceptedFiles?: string,\n  forceFallback?: boolean,\n  addRemoveLinks?: boolean,\n  uploadMultiple?: boolean,\n  parallelUploads?: number,\n  resizeWidth?: number,\n  resizeHeight?: number,\n  resizeMethod?: string,\n  resizeQuality?: number,\n  resizeMimeType?: string,\n  thumbnailWidth?: number,\n  thumbnailHeight?: number,\n  thumbnailMethod?: string,\n  previewTemplate?: string,\n  autoQueue?: boolean,\n  autoProcessQueue?: boolean,\n  ignoreHiddenFiles?: boolean,\n  maxThumbnailFilesize?: number,\n  createImageThumbnails?: boolean,\n\n  chunking?: boolean,\n  chunkSize?: number,\n  retryChunks?: boolean,\n  forceChunking?: boolean,\n  retryChunksLimit?: number,\n  parallelChunkUploads?: boolean,\n\n  dictFileSizeUnits?: any,\n\n  dictDefaultMessage?: string,\n  dictFallbackMessage?: string,\n\n  dictFileTooBig?: string,\n  dictResponseError?: string,\n  dictInvalidFileType?: string,\n\n  dictRemoveFile?: string,\n  dictCancelUpload?: string,\n  dictUploadCanceled?: string,\n  dictFallbackText?: string,\n  dictMaxFilesExceeded?: string,\n  dictRemoveFileConfirmation?: string,\n  dictCancelUploadConfirmation?: string\n}\n\nexport class DropzoneConfig implements DropzoneConfigInterface {\n  timeout?: number;\n\n  autoReset?: number;\n  errorReset?: number;\n  cancelReset?: number;\n\n  url?: string | DropzoneUrlFunction;\n  method?: string | DropzoneMethodFunction;\n\n  params?: any | DropzoneParamsFunction;\n  headers?: any | DropzoneHeadersFunction;\n\n  init?: DropzoneInitFunction;\n  accept?: DropzoneAcceptFunction;\n  resize?: DropzoneResizeFunction;\n  fallback?: DropzoneFallbackFunction;\n  renameFile?: DropzoneRenameFileFunction;\n  transformFile?: DropzoneTransformFileFunction;\n  chunksUploaded?: DropzoneChunksUploadedFunction;\n\n  withCredentials?: boolean;\n\n  previewsContainer?: any;\n  hiddenInputContainer?: any;\n\n  clickable?: string | string[] | boolean;\n  paramName?: any;\n  capture?: string;\n  maxFiles?: number;\n  maxFilesize?: number;\n  filesizeBase?: number;\n  acceptedFiles?: string;\n  forceFallback?: boolean;\n  addRemoveLinks?: boolean;\n  uploadMultiple?: boolean;\n  parallelUploads?: number;\n  resizeWidth?: number;\n  resizeHeight?: number;\n  resizeMethod?: string;\n  resizeQuality?: number;\n  resizeMimeType?: string;\n  thumbnailWidth?: number;\n  thumbnailHeight?: number;\n  thumbnailMethod?: string;\n  previewTemplate?: string;\n  autoQueue?: boolean;\n  autoProcessQueue?: boolean;\n  ignoreHiddenFiles?: boolean;\n  maxThumbnailFilesize?: number;\n  createImageThumbnails?: boolean;\n\n  chunking?: boolean;\n  chunkSize?: number;\n  retryChunks?: boolean;\n  forceChunking?: boolean;\n  retryChunksLimit?: number;\n  parallelChunkUploads?: boolean;\n\n  dictFileSizeUnits?: any;\n\n  dictDefaultMessage?: string;\n  dictFallbackMessage?: string;\n\n  dictFileTooBig?: string;\n  dictResponseError?: string;\n  dictInvalidFileType?: string;\n\n  dictRemoveFile?: string;\n  dictCancelUpload?: string;\n  dictUploadCanceled?: string;\n  dictFallbackText?: string;\n  dictMaxFilesExceeded?: string;\n  dictRemoveFileConfirmation?: string;\n  dictCancelUploadConfirmation?: string;\n\n  constructor(config: DropzoneConfigInterface = {}) {\n    this.assign(config);\n  }\n\n  assign(config: DropzoneConfigInterface | any = {}, target?: any) {\n    target = target || this;\n\n    for (const key in config) {\n      if (config[key] != null && !(Array.isArray(config[key])) &&\n        typeof config[key] === 'object' && !(config[key] instanceof HTMLElement))\n      {\n        target[key] = {};\n\n        this.assign(config[key], target[key]);\n      } else {\n        target[key] = config[key];\n      }\n    }\n  }\n}\n\nexport type DropzoneUrlFunction = (files: any) => string;\nexport type DropzoneMethodFunction = (files: any) => string;\n\nexport type DropzoneParamsFunction = (files: any, xhr: any, chunk?: any) => any;\nexport type DropzoneHeadersFunction = () => any;\n\nexport type DropzoneInitFunction = () => any;\nexport type DropzoneFallbackFunction = () => HTMLElement;\n\nexport type DropzoneAcceptFunction = (file: File, done: Function) => any;\nexport type DropzoneResizeFunction = (file: File, width: number, height: number, resizeMethod: string) => any;\n\nexport type DropzoneRenameFileFunction = (file: File) => string;\nexport type DropzoneTransformFileFunction = (file: File, done: Function) => any;\nexport type DropzoneChunksUploadedFunction = (file: File, done: Function) => any;\n"]}