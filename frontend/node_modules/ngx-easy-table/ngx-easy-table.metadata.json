{"__symbolic":"module","version":4,"metadata":{"TableModule":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"NgModule","line":6,"character":1},"arguments":[{"imports":[{"__symbolic":"reference","module":"@angular/common","name":"CommonModule","line":8,"character":4},{"__symbolic":"reference","name":"ɵb"}],"bootstrap":[{"__symbolic":"reference","name":"ɵc"}],"exports":[{"__symbolic":"reference","name":"ɵc"}],"providers":[]}]}],"members":{}},"Config":{"__symbolic":"interface"},"STYLE":{"TINY":"tiny","BIG":"big","NORMAL":"normal"},"THEME":{"LIGHT":"light","DARK":"dark"},"Columns":{"__symbolic":"interface"},"Event":{"onPagination":"onPagination","onOrder":"onOrder","onGlobalSearch":"onGlobalSearch","onSearch":"onSearch","onClick":"onClick","onDoubleClick":"onDoubleClick","onCheckboxSelect":"onCheckboxSelect","onSelectAll":"onSelectAll","onColumnResizeMouseDown":"onColumnResizeMouseDown","onColumnResizeMouseUp":"onColumnResizeMouseUp","onRowDrop":"onRowDrop","onRowCollapsedShow":"onRowCollapsedShow","onRowCollapsedHide":"onRowCollapsedHide","onRowContextMenu":"onRowContextMenu"},"Pagination":{"__symbolic":"interface"},"API":{"rowContextMenuClicked":"rowContextMenuClicked","setInputValue":"setInputValue","toolPanelClicked":"toolPanelClicked","onGlobalSearch":"onGlobalSearch","setPaginationCurrentPage":"setPaginationCurrentPage","getPaginationCurrentPage":"getPaginationCurrentPage","getPaginationTotalItems":"getPaginationTotalItems","getPaginationLastPage":"getPaginationLastPage","setPaginationRange":"setPaginationRange","setPaginationPreviousLabel":"setPaginationPreviousLabel","setPaginationNextLabel":"setPaginationNextLabel","setPaginationDisplayLimit":"setPaginationDisplayLimit","setTableClass":"setTableClass","setRowClass":"setRowClass","setCellClass":"setCellClass","setRowStyle":"setRowStyle","setCellStyle":"setCellStyle","sortBy":"sortBy"},"rowClass":{"__symbolic":"interface"},"cellClass":{"__symbolic":"interface"},"rowStyle":{"__symbolic":"interface"},"cellStyle":{"__symbolic":"interface"},"ApiType":{"__symbolic":"interface"},"APIDefinition":{"__symbolic":"interface"},"ɵa":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":42,"character":1}}],"members":{},"statics":{"config":{"__symbolic":"reference","name":"DefaultConfig"}}},"DefaultConfig":{"searchEnabled":false,"headerEnabled":true,"orderEnabled":true,"orderEventOnly":false,"paginationEnabled":true,"exportEnabled":false,"clickEvent":true,"selectRow":false,"selectCol":false,"selectCell":false,"rows":10,"additionalActions":false,"serverPagination":false,"isLoading":false,"detailsTemplate":false,"groupRows":false,"paginationRangeEnabled":true,"collapseAllRows":false,"checkboxes":false,"resizeColumn":false,"fixedColumnWidth":true,"horizontalScroll":false,"draggable":false,"logger":false,"showDetailsArrow":false,"showContextMenu":false,"persistState":false,"paginationMaxSize":5,"threeWaySort":false,"tableLayout":{"style":{"__symbolic":"select","expression":{"__symbolic":"reference","name":"STYLE"},"member":"NORMAL"},"theme":{"__symbolic":"select","expression":{"__symbolic":"reference","name":"THEME"},"member":"LIGHT"},"borderless":false,"hover":true,"striped":false}},"ɵb":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"NgModule","line":17,"character":1},"arguments":[{"declarations":[{"__symbolic":"reference","name":"ɵc"},{"__symbolic":"reference","name":"ɵf"},{"__symbolic":"reference","name":"ɵg"},{"__symbolic":"reference","name":"ɵh"},{"__symbolic":"reference","name":"ɵi"},{"__symbolic":"reference","name":"ɵj"},{"__symbolic":"reference","name":"ɵk"},{"__symbolic":"reference","name":"ɵl"}],"imports":[{"__symbolic":"reference","module":"@angular/common","name":"CommonModule","line":29,"character":4},{"__symbolic":"reference","module":"ngx-pagination","name":"NgxPaginationModule","line":30,"character":4},{"__symbolic":"reference","module":"@angular/cdk/drag-drop","name":"DragDropModule","line":31,"character":4}],"exports":[{"__symbolic":"reference","name":"ɵc"}]}]}],"members":{}},"ɵc":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":38,"character":1},"arguments":[{"selector":"ngx-table","providers":[{"__symbolic":"reference","name":"ɵa"},{"__symbolic":"reference","name":"ɵd"},{"__symbolic":"reference","name":"ɵe"}],"changeDetection":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectionStrategy","line":42,"character":19},"member":"OnPush"},"template":"<div class=\"ngx-container\">\n  <table [id]=\"id\"\n         [ngClass]=\"(tableClass === null || tableClass === '') ? 'ngx-table' : tableClass\"\n         [class.ngx-table__table--tiny]=\"config.tableLayout.style === 'tiny'\"\n         [class.ngx-table__table--normal]=\"config.tableLayout.style === 'normal'\"\n         [class.ngx-table__table--big]=\"config.tableLayout.style === 'big'\"\n         [class.ngx-table__table--borderless]=\"config.tableLayout.borderless\"\n         [class.ngx-table__table--dark]=\"config.tableLayout.theme === 'dark'\"\n         [class.ngx-table__table--hoverable]=\"config.tableLayout.hover\"\n         [class.ngx-table__table--striped]=\"config.tableLayout.striped\"\n         [class.ngx-table__horizontal-scroll]=\"config.horizontalScroll && !isLoading\">\n    <thead>\n    <tr class=\"ngx-table__header\" *ngIf=\"config.headerEnabled\">\n      <th *ngIf=\"config.checkboxes\" width=\"3%\">\n        <ng-container\n          *ngIf=\"selectAllTemplate\"\n          [ngTemplateOutlet]=\"selectAllTemplate\"\n          [ngTemplateOutletContext]=\"{ $implicit: onSelectAllBinded }\">\n        </ng-container>\n        <label class=\"ngx-form-checkbox\" *ngIf=\"!selectAllTemplate\">\n          <input type=\"checkbox\" (change)=\"onSelectAll()\">\n          <i class=\"ngx-form-icon\" id=\"selectAllCheckbox\"></i>\n        </label>\n      </th>\n      <ng-container *ngFor=\"let column of columns;\">\n        <th class=\"ngx-table__header-cell\"\n            #th\n            [attr.width]=\"getColumnWidth(column)\"\n            (mousedown)=\"onMouseDown($event, th)\"\n            (mouseup)=\"onMouseUp($event)\"\n            (mousemove)=\"onMouseMove($event)\">\n          <div (click)=\"orderBy(column)\" [class.pointer]=\"isOrderEnabled(column)\">\n            <div class=\"ngx-table__header-title\">{{ column.title }}<span>&nbsp;</span>\n              <div [style.display]=\"config.orderEnabled ? 'inline' : 'none' \">\n                <span *ngIf=\"sortKey === column.key && this.sortState.get(sortKey) === ''\"> -</span>\n                <i *ngIf=\"sortKey === column.key && this.sortState.get(sortKey) === 'asc'\"\n                   class=\"ngx-icon ngx-icon-arrow-up\">\n                </i>\n                <i *ngIf=\"sortKey === column.key && this.sortState.get(sortKey) === 'desc'\"\n                   class=\"ngx-icon ngx-icon-arrow-down\">\n                </i>\n              </div>\n            </div>\n          </div>\n          <div class=\"ngx-table__column-resizer\" *ngIf=\"config.resizeColumn\"></div>\n        </th>\n      </ng-container>\n      <th *ngIf=\"config.additionalActions || config.detailsTemplate || config.collapseAllRows || config.groupRows\"\n          class=\"ngx-table__header-cell-additional-actions\">\n        <div class=\"ngx-dropdown ngx-active\"\n             *ngIf=\"config.additionalActions\"\n             [class.ngx-active]=\"menuActive\">\n          <a class=\"ngx-btn ngx-btn-link\" (click)=\"menuActive = !menuActive\">\n            <span class=\"ngx-icon ngx-icon-menu\"></span>\n          </a>\n          <ul class=\"ngx-menu ngx-table__table-menu\">\n            <li class=\"ngx-menu-item\">\n              <app-csv-export [data]=\"data\"\n                              *ngIf=\"config.exportEnabled\">\n              </app-csv-export>\n            </li>\n          </ul>\n        </div>\n      </th>\n    </tr>\n    <tr *ngIf=\"config.searchEnabled && !filtersTemplate\"\n        class=\"ngx-table__sort-header\">\n      <th *ngIf=\"config.checkboxes\"></th>\n      <ng-container *ngFor=\"let column of columns\">\n        <th>\n          <table-header\n            *ngIf=\"getColumnDefinition(column)\"\n            (update)=\"onSearch($event)\"\n            [column]=\"column\">\n          </table-header>\n        </th>\n      </ng-container>\n      <th *ngIf=\"config.additionalActions || config.detailsTemplate\"></th>\n    </tr>\n    <ng-container *ngIf=\"filtersTemplate\">\n      <tr>\n        <ng-container [ngTemplateOutlet]=\"filtersTemplate\">\n        </ng-container>\n      </tr>\n    </ng-container>\n    </thead>\n    <tbody *ngIf=\"data && !isLoading  && !config.draggable\">\n    <ng-container *ngIf=\"rowTemplate\">\n      <ul class=\"ngx-table__table-row-context-menu\"\n          [ngStyle]=\"{'position': 'absolute', 'top': rowContextMenuPosition.top, 'left': rowContextMenuPosition.left }\"\n          *ngIf=\"rowContextMenuPosition.top\">\n        <ng-container\n          [ngTemplateOutlet]=\"rowContextMenu\"\n          [ngTemplateOutletContext]=\"{ $implicit: rowContextMenuPosition.value}\">\n        </ng-container>\n      </ul>\n      <ng-container *ngFor=\"let row of data | sort:sortBy | search:term | global:globalSearchTerm | paginate: { itemsPerPage: limit, currentPage: page, totalItems: count, id: id };\n              let rowIndex = index\">\n        <tr\n          (click)=\"onClick($event, row, '', null, rowIndex)\"\n          (contextmenu)=\"onRowContextMenu($event, row, '', null, rowIndex)\"\n          (dblclick)=\"onDoubleClick($event, row, '', null, rowIndex)\"\n          [class.ngx-table__table-row--selected]=\"rowIndex == selectedRow && !config.selectCell\">\n          <ng-container\n            [ngTemplateOutlet]=\"rowTemplate\"\n            [ngTemplateOutletContext]=\"{ $implicit: row, index: rowIndex }\">\n          </ng-container>\n          <td *ngIf=\"config.detailsTemplate\">\n            <span class=\"ngx-icon\"\n                  *ngIf=\"arrowDefinition\"\n                  [ngClass]=\"isRowCollapsed(rowIndex) ? 'ngx-icon-arrow-down' : 'ngx-icon-arrow-right'\"\n                  (click)=\"collapseRow(rowIndex)\">\n            </span>\n          </td>\n        </tr>\n        <tr\n          *ngIf=\"(config.detailsTemplate && selectedDetailsTemplateRowId.has(rowIndex)) || config.collapseAllRows\">\n          <td [attr.colspan]=\"columns.length + 1\">\n            <ng-container\n              [ngTemplateOutlet]=\"detailsTemplate\"\n              [ngTemplateOutletContext]=\"{ $implicit: row, index: rowIndex  }\">\n            </ng-container>\n          </td>\n        </tr>\n      </ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"!rowTemplate && !config.groupRows\">\n      <ul class=\"ngx-table__table-row-context-menu\"\n          [ngStyle]=\"{'position': 'absolute', 'top': rowContextMenuPosition.top, 'left': rowContextMenuPosition.left }\"\n          *ngIf=\"rowContextMenuPosition.top\">\n        <ng-container\n          [ngTemplateOutlet]=\"rowContextMenu\"\n          [ngTemplateOutletContext]=\"{ $implicit: rowContextMenuPosition.value}\">\n        </ng-container>\n      </ul>\n      <ng-container\n        *ngFor=\"let row of data | sort:sortBy | search:term | global:globalSearchTerm | paginate: { itemsPerPage: limit, currentPage: page, totalItems: count, id: id };\n                  let rowIndex = index\">\n        <tr [class.ngx-table__table-row--selected]=\"rowIndex == selectedRow && !config.selectCell\">\n          <td *ngIf=\"config.checkboxes\">\n            <label class=\"ngx-form-checkbox\">\n              <input type=\"checkbox\"\n                     id=\"checkbox-{{rowIndex}}\"\n                     [checked]=\"isSelected\"\n                     (change)=\"onCheckboxSelect($event, row, rowIndex)\">\n              <i class=\"ngx-form-icon\"></i>\n            </label>\n          </td>\n          <ng-container *ngFor=\"let column of columns; let colIndex = index\">\n            <td (click)=\"onClick($event, row, column.key, colIndex, rowIndex)\"\n                (contextmenu)=\"onRowContextMenu($event, row, column.key, colIndex, rowIndex)\"\n                (dblclick)=\"onDoubleClick($event, row, column.key, colIndex, rowIndex)\"\n                [class.ngx-table__table-col--selected]=\"colIndex == selectedCol && !config.selectCell\"\n                [class.ngx-table__table-cell--selected]=\"colIndex == selectedCol && rowIndex == selectedRow && !config.selectCol && !config.selectRow\"\n            >\n              <div *ngIf=\"!column.cellTemplate\">{{ row | render:column.key }}</div>\n              <ng-container\n                *ngIf=\"column.cellTemplate\"\n                [ngTemplateOutlet]=\"column.cellTemplate\"\n                [ngTemplateOutletContext]=\"{ $implicit: row, rowIndex: rowIndex }\">\n              </ng-container>\n            </td>\n          </ng-container>\n          <td *ngIf=\"config.additionalActions || config.detailsTemplate\">\n            <span class=\"ngx-icon\"\n                  *ngIf=\"arrowDefinition\"\n                  [ngClass]=\"isRowCollapsed(rowIndex) ? 'ngx-icon-arrow-down' : 'ngx-icon-arrow-right'\"\n                  (click)=\"collapseRow(rowIndex)\">\n            </span>\n          </td>\n        </tr>\n        <tr\n          *ngIf=\"(config.detailsTemplate && selectedDetailsTemplateRowId.has(rowIndex)) || config.collapseAllRows\">\n          <td *ngIf=\"config.checkboxes\"></td>\n          <td [attr.colspan]=\"columns.length + 1\">\n            <ng-container\n              [ngTemplateOutlet]=\"detailsTemplate\"\n              [ngTemplateOutletContext]=\"{ $implicit: row, index: rowIndex }\">\n            </ng-container>\n          </td>\n        </tr>\n      </ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"!rowTemplate && config.groupRows\">\n      <ng-container\n        *ngFor=\"let group of grouped | sort:sortBy:config | search:term:config | global:globalSearchTerm | paginate: { itemsPerPage: limit, currentPage: page, totalItems: count, id: id }; let rowIndex = index\">\n        <tr>\n          <ng-container *ngIf=\"!groupRowsHeaderTemplate\">\n            <td [attr.colspan]=\"columns.length\">\n              <div>{{group[0][groupRowsBy]}} ({{group.length}})</div>\n            </td>\n          </ng-container>\n          <ng-container\n            *ngIf=\"groupRowsHeaderTemplate\"\n            [ngTemplateOutlet]=\"groupRowsHeaderTemplate\"\n            [ngTemplateOutletContext]=\"{\n              total: group.length,\n              key: groupRowsBy,\n              value: group[0] ? group[0][groupRowsBy] : '',\n              group: group,\n              index: rowIndex\n            }\">\n          </ng-container>\n          <td>\n            <span class=\"ngx-icon\"\n                  *ngIf=\"arrowDefinition\"\n                  [ngClass]=\"isRowCollapsed(rowIndex) ? 'ngx-icon-arrow-down' : 'ngx-icon-arrow-right'\"\n                  (click)=\"collapseRow(rowIndex)\">\n            </span>\n          </td>\n        </tr>\n        <ng-container *ngIf=\"selectedDetailsTemplateRowId.has(rowIndex)\">\n          <tr *ngFor=\"let row of group\">\n            <td *ngFor=\"let column of columns\">\n              {{ row | render:column.key }}\n              <!-- TODO allow users to add groupRowsTemplateRef -->\n            </td>\n            <td></td>\n          </tr>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n    </tbody>\n    <tbody *ngIf=\"data && !config.isLoading && config.draggable\" cdkDropList (cdkDropListDropped)=\"onDrop($event)\">\n    <ng-container *ngIf=\"!rowTemplate && !config.groupRows\">\n      <ng-container\n        *ngFor=\"let row of data | sort:sortBy | search:term | global:globalSearchTerm | paginate: { itemsPerPage: limit, currentPage: page, totalItems: count, id: id };\n                  let rowIndex = index\">\n        <tr class=\"ngx-draggable-row\" cdkDrag>\n          <td *ngIf=\"config.checkboxes\">\n            <label class=\"ngx-form-checkbox\">\n              <input type=\"checkbox\"\n                     id=\"checkbox-draggable-{{rowIndex}}\"\n                     [checked]=\"isSelected\"\n                     (change)=\"onCheckboxSelect($event, row, rowIndex)\">\n              <i class=\"ngx-form-icon\"></i>\n            </label>\n          </td>\n          <ng-container *ngFor=\"let column of columns; let colIndex = index\">\n            <td (click)=\"onClick($event, row, column.key, colIndex, rowIndex)\"\n                (dblclick)=\"onDoubleClick($event, row, column.key, colIndex, rowIndex)\"\n                [class.ngx-table__table-col--selected]=\"colIndex == selectedCol && !config.selectCell\"\n                [class.ngx-table__table-cell--selected]=\"colIndex == selectedCol && rowIndex == selectedRow && !config.selectCol && !config.selectRow\"\n            >\n              <div>{{ row | render:column.key }}</div>\n            </td>\n          </ng-container>\n        </tr>\n      </ng-container>\n    </ng-container>\n    </tbody>\n    <tbody *ngIf=\"!isLoading && (!data || (data && data.length < 1))\">\n    <tr class=\"ngx-table__body-empty\">\n      <ng-container\n        *ngIf=\"noResultsTemplate\"\n        [ngTemplateOutlet]=\"noResultsTemplate\">\n      </ng-container>\n      <td [attr.colspan]=\"columns && columns.length + 1\" *ngIf=\"!noResultsTemplate\">\n        <div class=\"ngx-table__table-no-results\">\n          No results\n        </div>\n      </td>\n    </tr>\n    </tbody>\n    <tbody *ngIf=\"isLoading\">\n    <tr class=\"ngx-table__body-loading\">\n      <td [attr.colspan]=\"columns && columns.length + 1\">\n        <div [style.height]=\"loadingHeight\"\n             class=\"ngx-table__table-loader-wrapper\">\n          <div class=\"ngx-table__table-loader\"></div>\n        </div>\n      </td>\n    </tr>\n    </tbody>\n    <tfoot *ngIf=\"summaryTemplate\">\n    <tr>\n      <ng-container\n        [ngTemplateOutlet]=\"summaryTemplate\"\n        [ngTemplateOutletContext]=\"{ total: data.length, limit: limit, page: page  }\">\n      </ng-container>\n    </tr>\n    </tfoot>\n  </table>\n  <pagination\n    [attr.id]=\"'pagination' + id\"\n    *ngIf=\"config.paginationEnabled\"\n    [id]=\"id\"\n    #paginationComponent\n    [config]=\"config\"\n    [pagination]=\"pagination\"\n    (updateRange)=\"onPagination($event)\">\n  </pagination>\n</div>\n"}]}],"members":{"paginationComponent":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":45,"character":3},"arguments":["paginationComponent"]}]}],"th":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":46,"character":3},"arguments":["th"]}]}],"configuration":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":75,"character":3},"arguments":["configuration"]}]}],"data":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":84,"character":3}}]}],"pagination":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":85,"character":3}}]}],"groupRowsBy":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":86,"character":3}}]}],"id":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":87,"character":3}}]}],"toggleRowIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":88,"character":3}}]}],"detailsTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":89,"character":3}}]}],"summaryTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":90,"character":3}}]}],"groupRowsHeaderTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":91,"character":3}}]}],"filtersTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":92,"character":3}}]}],"selectAllTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":93,"character":3}}]}],"noResultsTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":94,"character":3}}]}],"rowContextMenu":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":95,"character":3}}]}],"columns":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":96,"character":3}}]}],"event":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":97,"character":3}}]}],"rowTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ContentChild","line":98,"character":3},"arguments":[{"__symbolic":"reference","module":"@angular/core","name":"TemplateRef","line":98,"character":16}]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectorRef","line":100,"character":36}]}],"ngOnInit":[{"__symbolic":"method"}],"ngOnChanges":[{"__symbolic":"method"}],"isOrderEnabled":[{"__symbolic":"method"}],"orderBy":[{"__symbolic":"method"}],"onClick":[{"__symbolic":"method"}],"onDoubleClick":[{"__symbolic":"method"}],"onCheckboxSelect":[{"__symbolic":"method"}],"onSelectAll":[{"__symbolic":"method"}],"onSearch":[{"__symbolic":"method"}],"onGlobalSearch":[{"__symbolic":"method"}],"onPagination":[{"__symbolic":"method"}],"emitEvent":[{"__symbolic":"method"}],"collapseRow":[{"__symbolic":"method"}],"doDecodePersistedState":[{"__symbolic":"method"}],"isRowCollapsed":[{"__symbolic":"method"}],"onMouseDown":[{"__symbolic":"method"}],"onMouseMove":[{"__symbolic":"method"}],"onMouseUp":[{"__symbolic":"method"}],"getLoadingHeight":[{"__symbolic":"method"}],"getColumnWidth":[{"__symbolic":"method"}],"getColumnDefinition":[{"__symbolic":"method"}],"onRowContextMenu":[{"__symbolic":"method"}],"doApplyData":[{"__symbolic":"method"}],"onDrop":[{"__symbolic":"method"}],"apiEvent":[{"__symbolic":"method"}],"bindApi":[{"__symbolic":"method"}],"setColumnOrder":[{"__symbolic":"method"}]}},"ɵd":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":4,"character":1}}],"members":{}},"ɵe":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":3,"character":1}}],"members":{}},"ɵf":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":2,"character":1},"arguments":[{"selector":"app-csv-export","template":"\n    <a (click)=\"exportCsv()\" class=\"ngx-menu-item\">\n      CSV export\n    </a>"}]}],"members":{"data":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":15,"character":3}}]}],"exportCsv":[{"__symbolic":"method"}]}},"ɵg":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":3,"character":1},"arguments":[{"selector":"table-header","template":"<label for=\"search_{{ unifyKey(column.key) }}\">\n  <input type=\"text\"\n         id=\"search_{{ unifyKey(column.key) }}\"\n         aria-label=\"Search\"\n         placeholder=\"{{ column.placeholder ? column.placeholder : column.title }}\"\n         class=\"ngx-table__header-search\"\n         #input\n         (input)=\"onSearch(input)\"\n  >\n</label>\n"}]}],"members":{"column":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":9,"character":3}}]}],"update":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":10,"character":3}}]}],"unifyKey":[{"__symbolic":"method"}],"onSearch":[{"__symbolic":"method"}]}},"ɵh":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":17,"character":1},"arguments":[{"selector":"pagination","changeDetection":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectionStrategy","line":20,"character":19},"member":"OnPush"},"template":"<div class=\"ngx-pagination-wrapper\"\n     [class.ngx-table__table--dark-pagination-wrapper]=\"config.tableLayout.theme === 'dark'\">\n  <div class=\"ngx-pagination-steps\">\n    <pagination-template\n      #paginationDirective=\"paginationApi\"\n      id=\"pagination-controls\"\n      [id]=\"id\"\n      [class.ngx-table__table--dark-pagination]=\"config.tableLayout.theme === 'dark'\"\n      [maxSize]=\"config.paginationMaxSize || 5\"\n      (pageChange)=\"onPageChange($event)\">\n      <ul class=\"ngx-pagination\"\n          role=\"navigation\"\n          [attr.aria-label]=\"screenReaderPaginationLabel\"\n          [class.responsive]=\"true\">\n        <li class=\"pagination-previous\" [class.disabled]=\"paginationDirective.isFirstPage()\" *ngIf=\"directionLinks\">\n          <a tabindex=\"0\" *ngIf=\"1 < paginationDirective.getCurrent()\" (keyup.enter)=\"paginationDirective.previous()\"\n             (click)=\"paginationDirective.previous()\"\n             [attr.aria-label]=\"previousLabel + ' ' + screenReaderPageLabel\">\n            {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n          </a>\n          <span *ngIf=\"paginationDirective.isFirstPage()\">\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n            </span>\n        </li>\n        <li class=\"small-screen\">\n          {{ paginationDirective.getCurrent() }} / {{ paginationDirective.getLastPage() }}\n        </li>\n        <li [class.current]=\"paginationDirective.getCurrent() === page.value\"\n            [class.ellipsis]=\"page.label === '...'\"\n            *ngFor=\"let page of paginationDirective.pages\">\n          <a tabindex=\"0\" (keyup.enter)=\"paginationDirective.setCurrent(page.value)\"\n             (click)=\"paginationDirective.setCurrent(page.value)\"\n             *ngIf=\"paginationDirective.getCurrent() !== page.value\">\n            <span class=\"show-for-sr\">{{ screenReaderPageLabel }} </span>\n            <span>{{ page.label }}</span>\n          </a>\n          <ng-container *ngIf=\"paginationDirective.getCurrent() === page.value\">\n            <span class=\"show-for-sr\">{{ screenReaderCurrentLabel }} </span>\n            <span>{{ page.label }}</span>\n          </ng-container>\n        </li>\n        <li class=\"pagination-next\" [class.disabled]=\"paginationDirective.isLastPage()\" *ngIf=\"directionLinks\">\n          <a tabindex=\"0\" *ngIf=\"!paginationDirective.isLastPage()\" (keyup.enter)=\"paginationDirective.next()\"\n             (click)=\"paginationDirective.next()\"\n             [attr.aria-label]=\"nextLabel + ' ' + screenReaderPageLabel\">\n            {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n          </a>\n          <span *ngIf=\"paginationDirective.isLastPage()\">\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n            </span>\n        </li>\n      </ul>\n    </pagination-template>\n  </div>\n  <div class=\"ngx-pagination-range\"\n       [class.ngx-table__table--dark-pagination-range]=\"config.tableLayout.theme === 'dark'\"\n       *ngIf=\"config.paginationRangeEnabled\">\n    <div class=\"ngx-dropdown ngx-pagination-range-dropdown\"\n         [class.ngx-active]=\"showRange\"\n         id=\"rowAmount\">\n      <div class=\"ngx-btn-group\">\n        <div class=\"ngx-pagination-range-dropdown-button\"\n             (click)=\"showRange = !showRange\">\n          {{limit}} <i class=\"ngx-icon ngx-icon-arrow-down\"></i>\n        </div>\n        <ul class=\"ngx-menu\" *ngIf=\"showRange\">\n          <li class=\"ngx-pagination-range-dropdown-button-item\"\n              (click)=\"changeLimit(limit, false)\"\n              *ngFor=\"let limit of ranges\">\n            <span>{{limit}}</span>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</div>\n"}]}],"members":{"paginationDirective":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":23,"character":3},"arguments":["paginationDirective"]}]}],"pagination":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":24,"character":3}}]}],"config":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":25,"character":3}}]}],"id":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":26,"character":3}}]}],"updateRange":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":27,"character":3}}]}],"onPageChange":[{"__symbolic":"method"}],"changeLimit":[{"__symbolic":"method"}]}},"ɵi":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Pipe","line":4,"character":1},"arguments":[{"name":"search"}]}],"members":{"transform":[{"__symbolic":"method"}],"filterGroup":[{"__symbolic":"method"}]}},"ɵj":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Pipe","line":3,"character":1},"arguments":[{"name":"render"}]}],"members":{"transform":[{"__symbolic":"method"}]}},"ɵk":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Pipe","line":2,"character":1},"arguments":[{"name":"global"}]}],"members":{"transform":[{"__symbolic":"method"}]}},"ɵl":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Pipe","line":4,"character":1},"arguments":[{"name":"sort"}]}],"members":{"transform":[{"__symbolic":"method"}],"sortAsc":[{"__symbolic":"method"}],"sortDesc":[{"__symbolic":"method"}]},"statics":{"isNaN":{"__symbolic":"function","parameters":["aV","bV"],"value":{"__symbolic":"binop","operator":"||","left":{"__symbolic":"binop","operator":"||","left":{"__symbolic":"call","expression":{"__symbolic":"reference","name":"isNaN"},"arguments":[{"__symbolic":"call","expression":{"__symbolic":"reference","name":"parseFloat"},"arguments":[{"__symbolic":"reference","name":"aV"}]}]},"right":{"__symbolic":"pre","operator":"!","operand":{"__symbolic":"call","expression":{"__symbolic":"reference","name":"isFinite"},"arguments":[{"__symbolic":"reference","name":"aV"}]}}},"right":{"__symbolic":"binop","operator":"||","left":{"__symbolic":"call","expression":{"__symbolic":"reference","name":"isNaN"},"arguments":[{"__symbolic":"call","expression":{"__symbolic":"reference","name":"parseFloat"},"arguments":[{"__symbolic":"reference","name":"bV"}]}]},"right":{"__symbolic":"pre","operator":"!","operand":{"__symbolic":"call","expression":{"__symbolic":"reference","name":"isFinite"},"arguments":[{"__symbolic":"reference","name":"bV"}]}}}}}}}},"origins":{"TableModule":"./lib/table.module","Config":"./lib/model/config","STYLE":"./lib/model/config","THEME":"./lib/model/config","Columns":"./lib/model/columns","Event":"./lib/model/event.enum","Pagination":"./lib/model/pagination","API":"./lib/model/api","rowClass":"./lib/model/api","cellClass":"./lib/model/api","rowStyle":"./lib/model/api","cellStyle":"./lib/model/api","ApiType":"./lib/model/api","APIDefinition":"./lib/model/api","ɵa":"./lib/services/config-service","DefaultConfig":"./lib/services/config-service","ɵb":"./lib/components/base/base.module","ɵc":"./lib/components/base/base.component","ɵd":"./lib/services/group-rows.service","ɵe":"./lib/services/style.service","ɵf":"./lib/components/csv-export.component","ɵg":"./lib/components/header/header.component","ɵh":"./lib/components/pagination/pagination.component","ɵi":"./lib/pipes/search-pipe","ɵj":"./lib/pipes/render-pipe","ɵk":"./lib/pipes/global-search-pipe","ɵl":"./lib/pipes/sort.pipe"},"importAs":"ngx-easy-table"}