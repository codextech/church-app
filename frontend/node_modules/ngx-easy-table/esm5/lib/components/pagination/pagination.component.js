/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { DefaultConfigService } from '../../services/config-service';
import { PaginationControlsDirective } from 'ngx-pagination';
/**
 * @record
 */
export function PaginationRange() { }
if (false) {
    /** @type {?} */
    PaginationRange.prototype.page;
    /** @type {?} */
    PaginationRange.prototype.limit;
}
var PaginationComponent = /** @class */ (function () {
    function PaginationComponent() {
        this.updateRange = new EventEmitter();
        this.ranges = [5, 10, 25, 50, 100];
        this.limit = DefaultConfigService.config.rows;
        this.showRange = false;
        this.screenReaderPaginationLabel = 'Pagination';
        this.screenReaderPageLabel = 'page';
        this.screenReaderCurrentLabel = 'You are on page';
        this.previousLabel = '';
        this.nextLabel = '';
        this.directionLinks = true;
    }
    /**
     * @param {?} page
     * @return {?}
     */
    PaginationComponent.prototype.onPageChange = /**
     * @param {?} page
     * @return {?}
     */
    function (page) {
        this.updateRange.emit({
            page: page,
            limit: this.limit,
        });
    };
    /**
     * @param {?} limit
     * @param {?} callFromAPI
     * @return {?}
     */
    PaginationComponent.prototype.changeLimit = /**
     * @param {?} limit
     * @param {?} callFromAPI
     * @return {?}
     */
    function (limit, callFromAPI) {
        if (!callFromAPI) {
            this.showRange = !this.showRange;
        }
        this.limit = limit;
        this.updateRange.emit({
            page: 1,
            limit: limit,
        });
    };
    PaginationComponent.decorators = [
        { type: Component, args: [{
                    selector: 'pagination',
                    template: "<div class=\"ngx-pagination-wrapper\"\n     [class.ngx-table__table--dark-pagination-wrapper]=\"config.tableLayout.theme === 'dark'\">\n  <div class=\"ngx-pagination-steps\">\n    <pagination-template\n      #paginationDirective=\"paginationApi\"\n      id=\"pagination-controls\"\n      [id]=\"id\"\n      [class.ngx-table__table--dark-pagination]=\"config.tableLayout.theme === 'dark'\"\n      [maxSize]=\"config.paginationMaxSize || 5\"\n      (pageChange)=\"onPageChange($event)\">\n      <ul class=\"ngx-pagination\"\n          role=\"navigation\"\n          [attr.aria-label]=\"screenReaderPaginationLabel\"\n          [class.responsive]=\"true\">\n        <li class=\"pagination-previous\" [class.disabled]=\"paginationDirective.isFirstPage()\" *ngIf=\"directionLinks\">\n          <a tabindex=\"0\" *ngIf=\"1 < paginationDirective.getCurrent()\" (keyup.enter)=\"paginationDirective.previous()\"\n             (click)=\"paginationDirective.previous()\"\n             [attr.aria-label]=\"previousLabel + ' ' + screenReaderPageLabel\">\n            {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n          </a>\n          <span *ngIf=\"paginationDirective.isFirstPage()\">\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n            </span>\n        </li>\n        <li class=\"small-screen\">\n          {{ paginationDirective.getCurrent() }} / {{ paginationDirective.getLastPage() }}\n        </li>\n        <li [class.current]=\"paginationDirective.getCurrent() === page.value\"\n            [class.ellipsis]=\"page.label === '...'\"\n            *ngFor=\"let page of paginationDirective.pages\">\n          <a tabindex=\"0\" (keyup.enter)=\"paginationDirective.setCurrent(page.value)\"\n             (click)=\"paginationDirective.setCurrent(page.value)\"\n             *ngIf=\"paginationDirective.getCurrent() !== page.value\">\n            <span class=\"show-for-sr\">{{ screenReaderPageLabel }} </span>\n            <span>{{ page.label }}</span>\n          </a>\n          <ng-container *ngIf=\"paginationDirective.getCurrent() === page.value\">\n            <span class=\"show-for-sr\">{{ screenReaderCurrentLabel }} </span>\n            <span>{{ page.label }}</span>\n          </ng-container>\n        </li>\n        <li class=\"pagination-next\" [class.disabled]=\"paginationDirective.isLastPage()\" *ngIf=\"directionLinks\">\n          <a tabindex=\"0\" *ngIf=\"!paginationDirective.isLastPage()\" (keyup.enter)=\"paginationDirective.next()\"\n             (click)=\"paginationDirective.next()\"\n             [attr.aria-label]=\"nextLabel + ' ' + screenReaderPageLabel\">\n            {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n          </a>\n          <span *ngIf=\"paginationDirective.isLastPage()\">\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n            </span>\n        </li>\n      </ul>\n    </pagination-template>\n  </div>\n  <div class=\"ngx-pagination-range\"\n       [class.ngx-table__table--dark-pagination-range]=\"config.tableLayout.theme === 'dark'\"\n       *ngIf=\"config.paginationRangeEnabled\">\n    <div class=\"ngx-dropdown ngx-pagination-range-dropdown\"\n         [class.ngx-active]=\"showRange\"\n         id=\"rowAmount\">\n      <div class=\"ngx-btn-group\">\n        <div class=\"ngx-pagination-range-dropdown-button\"\n             (click)=\"showRange = !showRange\">\n          {{limit}} <i class=\"ngx-icon ngx-icon-arrow-down\"></i>\n        </div>\n        <ul class=\"ngx-menu\" *ngIf=\"showRange\">\n          <li class=\"ngx-pagination-range-dropdown-button-item\"\n              (click)=\"changeLimit(limit, false)\"\n              *ngFor=\"let limit of ranges\">\n            <span>{{limit}}</span>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    PaginationComponent.propDecorators = {
        paginationDirective: [{ type: ViewChild, args: ['paginationDirective',] }],
        pagination: [{ type: Input }],
        config: [{ type: Input }],
        id: [{ type: Input }],
        updateRange: [{ type: Output }]
    };
    return PaginationComponent;
}());
export { PaginationComponent };
if (false) {
    /** @type {?} */
    PaginationComponent.prototype.paginationDirective;
    /** @type {?} */
    PaginationComponent.prototype.pagination;
    /** @type {?} */
    PaginationComponent.prototype.config;
    /** @type {?} */
    PaginationComponent.prototype.id;
    /** @type {?} */
    PaginationComponent.prototype.updateRange;
    /** @type {?} */
    PaginationComponent.prototype.ranges;
    /** @type {?} */
    PaginationComponent.prototype.limit;
    /** @type {?} */
    PaginationComponent.prototype.showRange;
    /** @type {?} */
    PaginationComponent.prototype.screenReaderPaginationLabel;
    /** @type {?} */
    PaginationComponent.prototype.screenReaderPageLabel;
    /** @type {?} */
    PaginationComponent.prototype.screenReaderCurrentLabel;
    /** @type {?} */
    PaginationComponent.prototype.previousLabel;
    /** @type {?} */
    PaginationComponent.prototype.nextLabel;
    /** @type {?} */
    PaginationComponent.prototype.directionLinks;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZWFzeS10YWJsZS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBQ0wsTUFBTSxFQUNOLFNBQVMsR0FDVixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNyRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQUU3RCxxQ0FHQzs7O0lBRkMsK0JBQWE7O0lBQ2IsZ0NBQWM7O0FBR2hCO0lBQUE7UUFVcUIsZ0JBQVcsR0FBa0MsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUM1RSxXQUFNLEdBQWEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDeEMsVUFBSyxHQUFXLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDakQsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUNsQixnQ0FBMkIsR0FBRyxZQUFZLENBQUM7UUFDM0MsMEJBQXFCLEdBQUcsTUFBTSxDQUFDO1FBQy9CLDZCQUF3QixHQUFHLGlCQUFpQixDQUFDO1FBQzdDLGtCQUFhLEdBQUcsRUFBRSxDQUFDO1FBQ25CLGNBQVMsR0FBRyxFQUFFLENBQUM7UUFDZixtQkFBYyxHQUFHLElBQUksQ0FBQztJQW9CL0IsQ0FBQzs7Ozs7SUFsQkMsMENBQVk7Ozs7SUFBWixVQUFhLElBQVk7UUFDdkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7WUFDcEIsSUFBSSxNQUFBO1lBQ0osS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1NBQ2xCLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7OztJQUVELHlDQUFXOzs7OztJQUFYLFVBQVksS0FBYSxFQUFFLFdBQW9CO1FBQzdDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDaEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7U0FDbEM7UUFDRCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztZQUNwQixJQUFJLEVBQUUsQ0FBQztZQUNQLEtBQUssT0FBQTtTQUNOLENBQUMsQ0FBQztJQUNMLENBQUM7O2dCQXJDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLFlBQVk7b0JBQ3RCLHMxSEFBZ0M7b0JBQ2hDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2lCQUNoRDs7O3NDQUVFLFNBQVMsU0FBQyxxQkFBcUI7NkJBQy9CLEtBQUs7eUJBQ0wsS0FBSztxQkFDTCxLQUFLOzhCQUNMLE1BQU07O0lBNkJULDBCQUFDO0NBQUEsQUF2Q0QsSUF1Q0M7U0FsQ1ksbUJBQW1COzs7SUFDOUIsa0RBQW1GOztJQUNuRix5Q0FBb0I7O0lBQ3BCLHFDQUF3Qjs7SUFDeEIsaUNBQVk7O0lBQ1osMENBQW1GOztJQUNuRixxQ0FBK0M7O0lBQy9DLG9DQUF3RDs7SUFDeEQsd0NBQXlCOztJQUN6QiwwREFBa0Q7O0lBQ2xELG9EQUFzQzs7SUFDdEMsdURBQW9EOztJQUNwRCw0Q0FBMEI7O0lBQzFCLHdDQUFzQjs7SUFDdEIsNkNBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBWaWV3Q2hpbGQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi4vLi4nO1xuaW1wb3J0IHsgRGVmYXVsdENvbmZpZ1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jb25maWctc2VydmljZSc7XG5pbXBvcnQgeyBQYWdpbmF0aW9uQ29udHJvbHNEaXJlY3RpdmUgfSBmcm9tICduZ3gtcGFnaW5hdGlvbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFnaW5hdGlvblJhbmdlIHtcbiAgcGFnZTogbnVtYmVyO1xuICBsaW1pdDogbnVtYmVyO1xufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwYWdpbmF0aW9uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BhZ2luYXRpb24uaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBQYWdpbmF0aW9uQ29tcG9uZW50IHtcbiAgQFZpZXdDaGlsZCgncGFnaW5hdGlvbkRpcmVjdGl2ZScpIHBhZ2luYXRpb25EaXJlY3RpdmU6IFBhZ2luYXRpb25Db250cm9sc0RpcmVjdGl2ZTtcbiAgQElucHV0KCkgcGFnaW5hdGlvbjtcbiAgQElucHV0KCkgY29uZmlnOiBDb25maWc7XG4gIEBJbnB1dCgpIGlkO1xuICBAT3V0cHV0KCkgcmVhZG9ubHkgdXBkYXRlUmFuZ2U6IEV2ZW50RW1pdHRlcjxQYWdpbmF0aW9uUmFuZ2U+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBwdWJsaWMgcmFuZ2VzOiBudW1iZXJbXSA9IFs1LCAxMCwgMjUsIDUwLCAxMDBdO1xuICBwdWJsaWMgbGltaXQ6IG51bWJlciA9IERlZmF1bHRDb25maWdTZXJ2aWNlLmNvbmZpZy5yb3dzO1xuICBwdWJsaWMgc2hvd1JhbmdlID0gZmFsc2U7XG4gIHB1YmxpYyBzY3JlZW5SZWFkZXJQYWdpbmF0aW9uTGFiZWwgPSAnUGFnaW5hdGlvbic7XG4gIHB1YmxpYyBzY3JlZW5SZWFkZXJQYWdlTGFiZWwgPSAncGFnZSc7XG4gIHB1YmxpYyBzY3JlZW5SZWFkZXJDdXJyZW50TGFiZWwgPSAnWW91IGFyZSBvbiBwYWdlJztcbiAgcHVibGljIHByZXZpb3VzTGFiZWwgPSAnJztcbiAgcHVibGljIG5leHRMYWJlbCA9ICcnO1xuICBwdWJsaWMgZGlyZWN0aW9uTGlua3MgPSB0cnVlO1xuXG4gIG9uUGFnZUNoYW5nZShwYWdlOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnVwZGF0ZVJhbmdlLmVtaXQoe1xuICAgICAgcGFnZSxcbiAgICAgIGxpbWl0OiB0aGlzLmxpbWl0LFxuICAgIH0pO1xuICB9XG5cbiAgY2hhbmdlTGltaXQobGltaXQ6IG51bWJlciwgY2FsbEZyb21BUEk6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBpZiAoIWNhbGxGcm9tQVBJKSB7XG4gICAgICB0aGlzLnNob3dSYW5nZSA9ICF0aGlzLnNob3dSYW5nZTtcbiAgICB9XG4gICAgdGhpcy5saW1pdCA9IGxpbWl0O1xuICAgIHRoaXMudXBkYXRlUmFuZ2UuZW1pdCh7XG4gICAgICBwYWdlOiAxLFxuICAgICAgbGltaXQsXG4gICAgfSk7XG4gIH1cblxufVxuIl19