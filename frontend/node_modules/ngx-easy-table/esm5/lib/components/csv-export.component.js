/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
var CsvExportComponent = /** @class */ (function () {
    function CsvExportComponent() {
    }
    /**
     * @return {?}
     */
    CsvExportComponent.prototype.exportCsv = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var data = this.data;
        /** @type {?} */
        var csvContent = 'data:text/csv;charset=utf-8,';
        /** @type {?} */
        var dataString = '';
        /** @type {?} */
        var x = [];
        /** @type {?} */
        var keys = Object.keys(this.data[0]);
        data.forEach((/**
         * @param {?} row
         * @param {?} index
         * @return {?}
         */
        function (row, index) {
            x[index] = [];
            keys.forEach((/**
             * @param {?} i
             * @return {?}
             */
            function (i) {
                if (row.hasOwnProperty(i)) {
                    if (typeof row[i] === 'object') {
                        row[i] = 'Object'; // so far just change object to "Object" string
                    }
                    x[index].push(row[i]);
                }
            }));
        }));
        csvContent += keys + '\n';
        x.forEach((/**
         * @param {?} row
         * @param {?} index
         * @return {?}
         */
        function (row, index) {
            dataString = row.join(',');
            csvContent += index < data.length ? dataString + '\n' : dataString;
        }));
        /** @type {?} */
        var encodedUri = encodeURI(csvContent);
        /** @type {?} */
        var link = document.createElement('a');
        link.setAttribute('href', encodedUri);
        link.setAttribute('download', 'my_data.csv');
        link.click();
    };
    CsvExportComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-csv-export',
                    template: "\n    <a (click)=\"exportCsv()\" class=\"ngx-menu-item\">\n      CSV export\n    </a>"
                }] }
    ];
    CsvExportComponent.propDecorators = {
        data: [{ type: Input }]
    };
    return CsvExportComponent;
}());
export { CsvExportComponent };
if (false) {
    /** @type {?} */
    CsvExportComponent.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3N2LWV4cG9ydC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZWFzeS10YWJsZS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2Nzdi1leHBvcnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRDtJQUFBO0lBNkNBLENBQUM7Ozs7SUE5QlEsc0NBQVM7OztJQUFoQjs7WUFDUSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUk7O1lBQ2xCLFVBQVUsR0FBRyw4QkFBOEI7O1lBQzNDLFVBQVUsR0FBRyxFQUFFOztZQUNiLENBQUMsR0FBVSxFQUFFOztZQUNiLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLE9BQU87Ozs7O1FBQUMsVUFBQyxHQUFHLEVBQUUsS0FBSztZQUN0QixDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsSUFBSSxDQUFDLE9BQU87Ozs7WUFBQyxVQUFDLENBQUM7Z0JBQ2IsSUFBSSxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUN6QixJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsRUFBRTt3QkFDOUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLCtDQUErQztxQkFDbkU7b0JBQ0QsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDdkI7WUFDSCxDQUFDLEVBQUMsQ0FBQztRQUNMLENBQUMsRUFBQyxDQUFDO1FBRUgsVUFBVSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7UUFDMUIsQ0FBQyxDQUFDLE9BQU87Ozs7O1FBQUMsVUFBQyxHQUFHLEVBQUUsS0FBSztZQUNuQixVQUFVLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMzQixVQUFVLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztRQUNyRSxDQUFDLEVBQUMsQ0FBQzs7WUFDRyxVQUFVLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQzs7WUFDbEMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBRTdDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNmLENBQUM7O2dCQTVDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsUUFBUSxFQUFFLHVGQUdIO2lCQUNSOzs7dUJBT0UsS0FBSzs7SUFnQ1IseUJBQUM7Q0FBQSxBQTdDRCxJQTZDQztTQWpDWSxrQkFBa0I7OztJQUM3QixrQ0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYXBwLWNzdi1leHBvcnQnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxhIChjbGljayk9XCJleHBvcnRDc3YoKVwiIGNsYXNzPVwibmd4LW1lbnUtaXRlbVwiPlxuICAgICAgQ1NWIGV4cG9ydFxuICAgIDwvYT5gLFxufSlcblxuLyoqXG4gKiBGcm9tIHZlcnNpb24gNS4wIENzdkV4cG9ydENvbXBvbmVudCB3aWxsIGJlIGRlcHJlY2F0ZWQsXG4gKiBhbmQgZnJvbSB2ZXJzaW9uIDYuMCBtb3ZlZCB0byBDc3ZFeHBvcnRDb21wb25lbnQgcGx1Z2luXG4gKi9cbmV4cG9ydCBjbGFzcyBDc3ZFeHBvcnRDb21wb25lbnQge1xuICBASW5wdXQoKSBkYXRhO1xuXG4gIHB1YmxpYyBleHBvcnRDc3YoKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICBsZXQgY3N2Q29udGVudCA9ICdkYXRhOnRleHQvY3N2O2NoYXJzZXQ9dXRmLTgsJztcbiAgICBsZXQgZGF0YVN0cmluZyA9ICcnO1xuICAgIGNvbnN0IHg6IGFueVtdID0gW107XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMuZGF0YVswXSk7XG4gICAgZGF0YS5mb3JFYWNoKChyb3csIGluZGV4KSA9PiB7XG4gICAgICB4W2luZGV4XSA9IFtdO1xuICAgICAga2V5cy5mb3JFYWNoKChpKSA9PiB7XG4gICAgICAgIGlmIChyb3cuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHJvd1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJvd1tpXSA9ICdPYmplY3QnOyAvLyBzbyBmYXIganVzdCBjaGFuZ2Ugb2JqZWN0IHRvIFwiT2JqZWN0XCIgc3RyaW5nXG4gICAgICAgICAgfVxuICAgICAgICAgIHhbaW5kZXhdLnB1c2gocm93W2ldKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBjc3ZDb250ZW50ICs9IGtleXMgKyAnXFxuJztcbiAgICB4LmZvckVhY2goKHJvdywgaW5kZXgpID0+IHtcbiAgICAgIGRhdGFTdHJpbmcgPSByb3cuam9pbignLCcpO1xuICAgICAgY3N2Q29udGVudCArPSBpbmRleCA8IGRhdGEubGVuZ3RoID8gZGF0YVN0cmluZyArICdcXG4nIDogZGF0YVN0cmluZztcbiAgICB9KTtcbiAgICBjb25zdCBlbmNvZGVkVXJpID0gZW5jb2RlVVJJKGNzdkNvbnRlbnQpO1xuICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgbGluay5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBlbmNvZGVkVXJpKTtcbiAgICBsaW5rLnNldEF0dHJpYnV0ZSgnZG93bmxvYWQnLCAnbXlfZGF0YS5jc3YnKTtcblxuICAgIGxpbmsuY2xpY2soKTtcbiAgfVxufVxuIl19