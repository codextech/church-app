/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
var StyleService = /** @class */ (function () {
    function StyleService() {
    }
    /**
     * @param {?} val
     * @return {?}
     */
    StyleService.setRowClass = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        /** @type {?} */
        var selector = "#table > tbody > tr:nth-child(" + val.row + ")";
        /** @type {?} */
        var row = document.querySelector(selector);
        if (row) {
            row.className = val.className;
        }
    };
    /**
     * @param {?} val
     * @return {?}
     */
    StyleService.setCellClass = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        /** @type {?} */
        var selector = "#table > tbody > tr:nth-child(" + val.row + ") > td:nth-child(" + val.cell + ")";
        /** @type {?} */
        var cell = document.querySelector(selector);
        if (cell) {
            cell.className = val.className;
        }
    };
    /**
     * @param {?} val
     * @return {?}
     */
    StyleService.setRowStyle = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        /** @type {?} */
        var selector = "#table > tbody > tr:nth-child(" + val.row + ")";
        /** @type {?} */
        var row = document.querySelector(selector);
        if (row) {
            // tslint:disable-next-line:no-string-literal
            row.style[val.attr] = val.value;
        }
    };
    /**
     * @param {?} val
     * @return {?}
     */
    StyleService.setCellStyle = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        /** @type {?} */
        var selector = "#table > tbody > tr:nth-child(" + val.row + ") > td:nth-child(" + val.cell + ")";
        /** @type {?} */
        var cell = document.querySelector(selector);
        if (cell) {
            // tslint:disable-next-line:no-string-literal
            cell.style[val.attr] = val.value;
        }
    };
    StyleService.decorators = [
        { type: Injectable }
    ];
    return StyleService;
}());
export { StyleService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1lYXN5LXRhYmxlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3N0eWxlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0M7SUFBQTtJQW1DQSxDQUFDOzs7OztJQWpDUSx3QkFBVzs7OztJQUFsQixVQUFtQixHQUFhOztZQUN4QixRQUFRLEdBQUcsbUNBQWlDLEdBQUcsQ0FBQyxHQUFHLE1BQUc7O1lBQ3RELEdBQUcsR0FBd0IsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7UUFDakUsSUFBSSxHQUFHLEVBQUU7WUFDUCxHQUFHLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUM7U0FDL0I7SUFDSCxDQUFDOzs7OztJQUVNLHlCQUFZOzs7O0lBQW5CLFVBQW9CLEdBQWM7O1lBQzFCLFFBQVEsR0FBRyxtQ0FBaUMsR0FBRyxDQUFDLEdBQUcseUJBQW9CLEdBQUcsQ0FBQyxJQUFJLE1BQUc7O1lBQ2xGLElBQUksR0FBeUIsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7UUFDbkUsSUFBSSxJQUFJLEVBQUU7WUFDUixJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUM7U0FDaEM7SUFDSCxDQUFDOzs7OztJQUVNLHdCQUFXOzs7O0lBQWxCLFVBQW1CLEdBQWE7O1lBQ3hCLFFBQVEsR0FBRyxtQ0FBaUMsR0FBRyxDQUFDLEdBQUcsTUFBRzs7WUFDdEQsR0FBRyxHQUF3QixRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztRQUNqRSxJQUFJLEdBQUcsRUFBRTtZQUNQLDZDQUE2QztZQUM3QyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQzs7Ozs7SUFFTSx5QkFBWTs7OztJQUFuQixVQUFvQixHQUFjOztZQUMxQixRQUFRLEdBQUcsbUNBQWlDLEdBQUcsQ0FBQyxHQUFHLHlCQUFvQixHQUFHLENBQUMsSUFBSSxNQUFHOztZQUNsRixJQUFJLEdBQXlCLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO1FBQ25FLElBQUksSUFBSSxFQUFFO1lBQ1IsNkNBQTZDO1lBQzdDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7U0FDbEM7SUFDSCxDQUFDOztnQkFsQ0YsVUFBVTs7SUFtQ1gsbUJBQUM7Q0FBQSxBQW5DRCxJQW1DQztTQWxDWSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgcm93Q2xhc3MsIHJvd1N0eWxlLCBjZWxsQ2xhc3MsIGNlbGxTdHlsZSB9IGZyb20gJy4uL21vZGVsL2FwaSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTdHlsZVNlcnZpY2Uge1xuICBzdGF0aWMgc2V0Um93Q2xhc3ModmFsOiByb3dDbGFzcyk6IHZvaWQge1xuICAgIGNvbnN0IHNlbGVjdG9yID0gYCN0YWJsZSA+IHRib2R5ID4gdHI6bnRoLWNoaWxkKCR7dmFsLnJvd30pYDtcbiAgICBjb25zdCByb3c6IEhUTUxUYWJsZVJvd0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICBpZiAocm93KSB7XG4gICAgICByb3cuY2xhc3NOYW1lID0gdmFsLmNsYXNzTmFtZTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgc2V0Q2VsbENsYXNzKHZhbDogY2VsbENsYXNzKTogdm9pZCB7XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBgI3RhYmxlID4gdGJvZHkgPiB0cjpudGgtY2hpbGQoJHt2YWwucm93fSkgPiB0ZDpudGgtY2hpbGQoJHt2YWwuY2VsbH0pYDtcbiAgICBjb25zdCBjZWxsOiBIVE1MVGFibGVDZWxsRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIGlmIChjZWxsKSB7XG4gICAgICBjZWxsLmNsYXNzTmFtZSA9IHZhbC5jbGFzc05hbWU7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHNldFJvd1N0eWxlKHZhbDogcm93U3R5bGUpOiB2b2lkIHtcbiAgICBjb25zdCBzZWxlY3RvciA9IGAjdGFibGUgPiB0Ym9keSA+IHRyOm50aC1jaGlsZCgke3ZhbC5yb3d9KWA7XG4gICAgY29uc3Qgcm93OiBIVE1MVGFibGVSb3dFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgaWYgKHJvdykge1xuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXN0cmluZy1saXRlcmFsXG4gICAgICByb3cuc3R5bGVbdmFsLmF0dHJdID0gdmFsLnZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBzZXRDZWxsU3R5bGUodmFsOiBjZWxsU3R5bGUpOiB2b2lkIHtcbiAgICBjb25zdCBzZWxlY3RvciA9IGAjdGFibGUgPiB0Ym9keSA+IHRyOm50aC1jaGlsZCgke3ZhbC5yb3d9KSA+IHRkOm50aC1jaGlsZCgke3ZhbC5jZWxsfSlgO1xuICAgIGNvbnN0IGNlbGw6IEhUTUxUYWJsZUNlbGxFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgaWYgKGNlbGwpIHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1zdHJpbmctbGl0ZXJhbFxuICAgICAgY2VsbC5zdHlsZVt2YWwuYXR0cl0gPSB2YWwudmFsdWU7XG4gICAgfVxuICB9XG59XG4iXX0=