/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { from } from 'rxjs';
import { flatMap, groupBy, reduce } from 'rxjs/operators';
var GroupRowsService = /** @class */ (function () {
    function GroupRowsService() {
    }
    /**
     * @template T
     * @param {?} data
     * @param {?} groupRowsBy
     * @return {?}
     */
    GroupRowsService.doGroupRows = /**
     * @template T
     * @param {?} data
     * @param {?} groupRowsBy
     * @return {?}
     */
    function (data, groupRowsBy) {
        /** @type {?} */
        var grouped = [];
        from(data).pipe(groupBy((/**
         * @param {?} row
         * @return {?}
         */
        function (row) { return row[groupRowsBy]; })), flatMap((/**
         * @param {?} group
         * @return {?}
         */
        function (group) { return group.pipe(reduce((/**
         * @param {?} acc
         * @param {?} curr
         * @return {?}
         */
        function (acc, curr) { return tslib_1.__spread(acc, [curr]); }), [])); }))).subscribe((/**
         * @param {?} row
         * @return {?}
         */
        function (row) { return grouped.push(row); }));
        return grouped;
    };
    GroupRowsService.decorators = [
        { type: Injectable }
    ];
    return GroupRowsService;
}());
export { GroupRowsService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAtcm93cy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWVhc3ktdGFibGUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvZ3JvdXAtcm93cy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzVCLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTFEO0lBQUE7SUFhQSxDQUFDOzs7Ozs7O0lBWGUsNEJBQVc7Ozs7OztJQUF6QixVQUE2QixJQUFTLEVBQUUsV0FBVzs7WUFDM0MsT0FBTyxHQUFHLEVBQUU7UUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FDYixPQUFPOzs7O1FBQUMsVUFBQyxHQUFHLElBQUssT0FBQSxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQWhCLENBQWdCLEVBQUMsRUFDbEMsT0FBTzs7OztRQUFDLFVBQUMsS0FBSyxJQUFLLE9BQUEsS0FBSyxDQUFDLElBQUksQ0FDM0IsTUFBTTs7Ozs7UUFBQyxVQUFDLEdBQVEsRUFBRSxJQUFPLElBQUssd0JBQUksR0FBRyxHQUFFLElBQUksSUFBYixDQUFjLEdBQUUsRUFBRSxDQUFDLENBQ2xELEVBRmtCLENBRWxCLEVBQUMsQ0FDSCxDQUFDLFNBQVM7Ozs7UUFBQyxVQUFDLEdBQUcsSUFBSyxPQUFBLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQWpCLENBQWlCLEVBQUMsQ0FBQztRQUV4QyxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDOztnQkFaRixVQUFVOztJQWFYLHVCQUFDO0NBQUEsQUFiRCxJQWFDO1NBWlksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmxhdE1hcCwgZ3JvdXBCeSwgcmVkdWNlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgR3JvdXBSb3dzU2VydmljZSB7XG4gIHB1YmxpYyBzdGF0aWMgZG9Hcm91cFJvd3M8VD4oZGF0YTogVFtdLCBncm91cFJvd3NCeSkge1xuICAgIGNvbnN0IGdyb3VwZWQgPSBbXTtcbiAgICBmcm9tKGRhdGEpLnBpcGUoXG4gICAgICBncm91cEJ5KChyb3cpID0+IHJvd1tncm91cFJvd3NCeV0pLFxuICAgICAgZmxhdE1hcCgoZ3JvdXApID0+IGdyb3VwLnBpcGUoXG4gICAgICAgIHJlZHVjZSgoYWNjOiBUW10sIGN1cnI6IFQpID0+IFsuLi5hY2MsIGN1cnJdLCBbXSksXG4gICAgICApKSxcbiAgICApLnN1YnNjcmliZSgocm93KSA9PiBncm91cGVkLnB1c2gocm93KSk7XG5cbiAgICByZXR1cm4gZ3JvdXBlZDtcbiAgfVxufVxuIl19