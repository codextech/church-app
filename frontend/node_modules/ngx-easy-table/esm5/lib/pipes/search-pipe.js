/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { FiltersService } from '../services/filters.service';
var SearchPipe = /** @class */ (function () {
    function SearchPipe() {
        this.filters = {};
    }
    /**
     * @param {?} array
     * @param {?=} filter
     * @param {?=} config
     * @return {?}
     */
    SearchPipe.prototype.transform = /**
     * @param {?} array
     * @param {?=} filter
     * @param {?=} config
     * @return {?}
     */
    function (array, filter, config) {
        var _this = this;
        if (typeof array === 'undefined') {
            return;
        }
        if (typeof filter === 'undefined') {
            return array;
        }
        filter.forEach((/**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            _this.filters[f.key] = f.value.toString().toLocaleLowerCase();
            if (Object.keys(f).length === 0 || f.value === '') {
                delete _this.filters[f.key];
            }
        }));
        if (config && config.groupRows) {
            return array.map((/**
             * @param {?} arr
             * @return {?}
             */
            function (arr) { return _this.filterGroup(arr); }));
        }
        return this.filterGroup(array);
    };
    /**
     * @private
     * @param {?} array
     * @return {?}
     */
    SearchPipe.prototype.filterGroup = /**
     * @private
     * @param {?} array
     * @return {?}
     */
    function (array) {
        var _this = this;
        return array.filter((/**
         * @param {?} obj
         * @return {?}
         */
        function (obj) {
            return Object.keys(_this.filters).every((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                /** @type {?} */
                var split = c.split('.');
                /** @type {?} */
                var val = FiltersService.getPath(split, obj);
                /** @type {?} */
                var element = (typeof val === 'object') ? JSON.stringify(val) : val.toString().toLocaleLowerCase();
                /** @type {?} */
                var strings = _this.filters[c].split(',');
                return strings.some((/**
                 * @param {?} string
                 * @return {?}
                 */
                function (string) { return element.indexOf(string.trim()) > -1; }));
            }));
        }));
    };
    SearchPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'search',
                },] }
    ];
    return SearchPipe;
}());
export { SearchPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SearchPipe.prototype.filters;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLXBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZWFzeS10YWJsZS8iLCJzb3VyY2VzIjpbImxpYi9waXBlcy9zZWFyY2gtcGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRzdEO0lBQUE7UUFLVSxZQUFPLEdBQThCLEVBQUUsQ0FBQztJQWdDbEQsQ0FBQzs7Ozs7OztJQTlCQyw4QkFBUzs7Ozs7O0lBQVQsVUFBVSxLQUFZLEVBQUUsTUFBOEMsRUFBRSxNQUFlO1FBQXZGLGlCQWlCQztRQWhCQyxJQUFJLE9BQU8sS0FBSyxLQUFLLFdBQVcsRUFBRTtZQUNoQyxPQUFPO1NBQ1I7UUFDRCxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsRUFBRTtZQUNqQyxPQUFPLEtBQUssQ0FBQztTQUNkO1FBQ0QsTUFBTSxDQUFDLE9BQU87Ozs7UUFBQyxVQUFDLENBQUM7WUFDZixLQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDN0QsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssS0FBSyxFQUFFLEVBQUU7Z0JBQ2pELE9BQU8sS0FBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDNUI7UUFDSCxDQUFDLEVBQUMsQ0FBQztRQUNILElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUU7WUFDOUIsT0FBTyxLQUFLLENBQUMsR0FBRzs7OztZQUFDLFVBQUMsR0FBRyxJQUFLLE9BQUEsS0FBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBckIsQ0FBcUIsRUFBQyxDQUFDO1NBQ2xEO1FBQ0QsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7Ozs7OztJQUVPLGdDQUFXOzs7OztJQUFuQixVQUFvQixLQUFZO1FBQWhDLGlCQVVDO1FBVEMsT0FBTyxLQUFLLENBQUMsTUFBTTs7OztRQUFDLFVBQUMsR0FBRztZQUN0QixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUs7Ozs7WUFBQyxVQUFDLENBQUM7O29CQUNqQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7O29CQUNwQixHQUFHLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDOztvQkFDeEMsT0FBTyxHQUFHLENBQUMsT0FBTyxHQUFHLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRTs7b0JBQzlGLE9BQU8sR0FBRyxLQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7Z0JBQzFDLE9BQU8sT0FBTyxDQUFDLElBQUk7Ozs7Z0JBQUMsVUFBQyxNQUFNLElBQUssT0FBQSxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFuQyxDQUFtQyxFQUFDLENBQUM7WUFDdkUsQ0FBQyxFQUFDLENBQUM7UUFDTCxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7O2dCQXBDRixJQUFJLFNBQUM7b0JBQ0osSUFBSSxFQUFFLFFBQVE7aUJBQ2Y7O0lBbUNELGlCQUFDO0NBQUEsQUFyQ0QsSUFxQ0M7U0FqQ1ksVUFBVTs7Ozs7O0lBQ3JCLDZCQUFnRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZpbHRlcnNTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZmlsdGVycy5zZXJ2aWNlJztcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4uJztcblxuQFBpcGUoe1xuICBuYW1lOiAnc2VhcmNoJyxcbn0pXG5cbmV4cG9ydCBjbGFzcyBTZWFyY2hQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHByaXZhdGUgZmlsdGVyczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xuXG4gIHRyYW5zZm9ybShhcnJheTogYW55W10sIGZpbHRlcj86IEFycmF5PHsgdmFsdWU6IHN0cmluZywga2V5OiBzdHJpbmcgfT4sIGNvbmZpZz86IENvbmZpZyk6IGFueVtdIHtcbiAgICBpZiAodHlwZW9mIGFycmF5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGZpbHRlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG4gICAgZmlsdGVyLmZvckVhY2goKGYpID0+IHtcbiAgICAgIHRoaXMuZmlsdGVyc1tmLmtleV0gPSBmLnZhbHVlLnRvU3RyaW5nKCkudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgIGlmIChPYmplY3Qua2V5cyhmKS5sZW5ndGggPT09IDAgfHwgZi52YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuZmlsdGVyc1tmLmtleV07XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGNvbmZpZyAmJiBjb25maWcuZ3JvdXBSb3dzKSB7XG4gICAgICByZXR1cm4gYXJyYXkubWFwKChhcnIpID0+IHRoaXMuZmlsdGVyR3JvdXAoYXJyKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZpbHRlckdyb3VwKGFycmF5KTtcbiAgfVxuXG4gIHByaXZhdGUgZmlsdGVyR3JvdXAoYXJyYXk6IGFueVtdKSB7XG4gICAgcmV0dXJuIGFycmF5LmZpbHRlcigob2JqKSA9PiB7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5maWx0ZXJzKS5ldmVyeSgoYykgPT4ge1xuICAgICAgICBjb25zdCBzcGxpdCA9IGMuc3BsaXQoJy4nKTtcbiAgICAgICAgY29uc3QgdmFsID0gRmlsdGVyc1NlcnZpY2UuZ2V0UGF0aChzcGxpdCwgb2JqKTtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9ICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JykgPyBKU09OLnN0cmluZ2lmeSh2YWwpIDogdmFsLnRvU3RyaW5nKCkudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3Qgc3RyaW5ncyA9IHRoaXMuZmlsdGVyc1tjXS5zcGxpdCgnLCcpO1xuICAgICAgICByZXR1cm4gc3RyaW5ncy5zb21lKChzdHJpbmcpID0+IGVsZW1lbnQuaW5kZXhPZihzdHJpbmcudHJpbSgpKSA+IC0xKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iXX0=