/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { DefaultConfigService } from '../../services/config-service';
import { PaginationControlsDirective } from 'ngx-pagination';
/**
 * @record
 */
export function PaginationRange() { }
if (false) {
    /** @type {?} */
    PaginationRange.prototype.page;
    /** @type {?} */
    PaginationRange.prototype.limit;
}
export class PaginationComponent {
    constructor() {
        this.updateRange = new EventEmitter();
        this.ranges = [5, 10, 25, 50, 100];
        this.limit = DefaultConfigService.config.rows;
        this.showRange = false;
        this.screenReaderPaginationLabel = 'Pagination';
        this.screenReaderPageLabel = 'page';
        this.screenReaderCurrentLabel = 'You are on page';
        this.previousLabel = '';
        this.nextLabel = '';
        this.directionLinks = true;
    }
    /**
     * @param {?} page
     * @return {?}
     */
    onPageChange(page) {
        this.updateRange.emit({
            page,
            limit: this.limit,
        });
    }
    /**
     * @param {?} limit
     * @param {?} callFromAPI
     * @return {?}
     */
    changeLimit(limit, callFromAPI) {
        if (!callFromAPI) {
            this.showRange = !this.showRange;
        }
        this.limit = limit;
        this.updateRange.emit({
            page: 1,
            limit,
        });
    }
}
PaginationComponent.decorators = [
    { type: Component, args: [{
                selector: 'pagination',
                template: "<div class=\"ngx-pagination-wrapper\"\n     [class.ngx-table__table--dark-pagination-wrapper]=\"config.tableLayout.theme === 'dark'\">\n  <div class=\"ngx-pagination-steps\">\n    <pagination-template\n      #paginationDirective=\"paginationApi\"\n      id=\"pagination-controls\"\n      [id]=\"id\"\n      [class.ngx-table__table--dark-pagination]=\"config.tableLayout.theme === 'dark'\"\n      [maxSize]=\"config.paginationMaxSize || 5\"\n      (pageChange)=\"onPageChange($event)\">\n      <ul class=\"ngx-pagination\"\n          role=\"navigation\"\n          [attr.aria-label]=\"screenReaderPaginationLabel\"\n          [class.responsive]=\"true\">\n        <li class=\"pagination-previous\" [class.disabled]=\"paginationDirective.isFirstPage()\" *ngIf=\"directionLinks\">\n          <a tabindex=\"0\" *ngIf=\"1 < paginationDirective.getCurrent()\" (keyup.enter)=\"paginationDirective.previous()\"\n             (click)=\"paginationDirective.previous()\"\n             [attr.aria-label]=\"previousLabel + ' ' + screenReaderPageLabel\">\n            {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n          </a>\n          <span *ngIf=\"paginationDirective.isFirstPage()\">\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n            </span>\n        </li>\n        <li class=\"small-screen\">\n          {{ paginationDirective.getCurrent() }} / {{ paginationDirective.getLastPage() }}\n        </li>\n        <li [class.current]=\"paginationDirective.getCurrent() === page.value\"\n            [class.ellipsis]=\"page.label === '...'\"\n            *ngFor=\"let page of paginationDirective.pages\">\n          <a tabindex=\"0\" (keyup.enter)=\"paginationDirective.setCurrent(page.value)\"\n             (click)=\"paginationDirective.setCurrent(page.value)\"\n             *ngIf=\"paginationDirective.getCurrent() !== page.value\">\n            <span class=\"show-for-sr\">{{ screenReaderPageLabel }} </span>\n            <span>{{ page.label }}</span>\n          </a>\n          <ng-container *ngIf=\"paginationDirective.getCurrent() === page.value\">\n            <span class=\"show-for-sr\">{{ screenReaderCurrentLabel }} </span>\n            <span>{{ page.label }}</span>\n          </ng-container>\n        </li>\n        <li class=\"pagination-next\" [class.disabled]=\"paginationDirective.isLastPage()\" *ngIf=\"directionLinks\">\n          <a tabindex=\"0\" *ngIf=\"!paginationDirective.isLastPage()\" (keyup.enter)=\"paginationDirective.next()\"\n             (click)=\"paginationDirective.next()\"\n             [attr.aria-label]=\"nextLabel + ' ' + screenReaderPageLabel\">\n            {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n          </a>\n          <span *ngIf=\"paginationDirective.isLastPage()\">\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n            </span>\n        </li>\n      </ul>\n    </pagination-template>\n  </div>\n  <div class=\"ngx-pagination-range\"\n       [class.ngx-table__table--dark-pagination-range]=\"config.tableLayout.theme === 'dark'\"\n       *ngIf=\"config.paginationRangeEnabled\">\n    <div class=\"ngx-dropdown ngx-pagination-range-dropdown\"\n         [class.ngx-active]=\"showRange\"\n         id=\"rowAmount\">\n      <div class=\"ngx-btn-group\">\n        <div class=\"ngx-pagination-range-dropdown-button\"\n             (click)=\"showRange = !showRange\">\n          {{limit}} <i class=\"ngx-icon ngx-icon-arrow-down\"></i>\n        </div>\n        <ul class=\"ngx-menu\" *ngIf=\"showRange\">\n          <li class=\"ngx-pagination-range-dropdown-button-item\"\n              (click)=\"changeLimit(limit, false)\"\n              *ngFor=\"let limit of ranges\">\n            <span>{{limit}}</span>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
PaginationComponent.propDecorators = {
    paginationDirective: [{ type: ViewChild, args: ['paginationDirective',] }],
    pagination: [{ type: Input }],
    config: [{ type: Input }],
    id: [{ type: Input }],
    updateRange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    PaginationComponent.prototype.paginationDirective;
    /** @type {?} */
    PaginationComponent.prototype.pagination;
    /** @type {?} */
    PaginationComponent.prototype.config;
    /** @type {?} */
    PaginationComponent.prototype.id;
    /** @type {?} */
    PaginationComponent.prototype.updateRange;
    /** @type {?} */
    PaginationComponent.prototype.ranges;
    /** @type {?} */
    PaginationComponent.prototype.limit;
    /** @type {?} */
    PaginationComponent.prototype.showRange;
    /** @type {?} */
    PaginationComponent.prototype.screenReaderPaginationLabel;
    /** @type {?} */
    PaginationComponent.prototype.screenReaderPageLabel;
    /** @type {?} */
    PaginationComponent.prototype.screenReaderCurrentLabel;
    /** @type {?} */
    PaginationComponent.prototype.previousLabel;
    /** @type {?} */
    PaginationComponent.prototype.nextLabel;
    /** @type {?} */
    PaginationComponent.prototype.directionLinks;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZWFzeS10YWJsZS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBQ0wsTUFBTSxFQUNOLFNBQVMsR0FDVixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNyRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQUU3RCxxQ0FHQzs7O0lBRkMsK0JBQWE7O0lBQ2IsZ0NBQWM7O0FBUWhCLE1BQU0sT0FBTyxtQkFBbUI7SUFMaEM7UUFVcUIsZ0JBQVcsR0FBa0MsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUM1RSxXQUFNLEdBQWEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDeEMsVUFBSyxHQUFXLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDakQsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUNsQixnQ0FBMkIsR0FBRyxZQUFZLENBQUM7UUFDM0MsMEJBQXFCLEdBQUcsTUFBTSxDQUFDO1FBQy9CLDZCQUF3QixHQUFHLGlCQUFpQixDQUFDO1FBQzdDLGtCQUFhLEdBQUcsRUFBRSxDQUFDO1FBQ25CLGNBQVMsR0FBRyxFQUFFLENBQUM7UUFDZixtQkFBYyxHQUFHLElBQUksQ0FBQztJQW9CL0IsQ0FBQzs7Ozs7SUFsQkMsWUFBWSxDQUFDLElBQVk7UUFDdkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7WUFDcEIsSUFBSTtZQUNKLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztTQUNsQixDQUFDLENBQUM7SUFDTCxDQUFDOzs7Ozs7SUFFRCxXQUFXLENBQUMsS0FBYSxFQUFFLFdBQW9CO1FBQzdDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDaEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7U0FDbEM7UUFDRCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztZQUNwQixJQUFJLEVBQUUsQ0FBQztZQUNQLEtBQUs7U0FDTixDQUFDLENBQUM7SUFDTCxDQUFDOzs7WUFyQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxZQUFZO2dCQUN0QixzMUhBQWdDO2dCQUNoQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTthQUNoRDs7O2tDQUVFLFNBQVMsU0FBQyxxQkFBcUI7eUJBQy9CLEtBQUs7cUJBQ0wsS0FBSztpQkFDTCxLQUFLOzBCQUNMLE1BQU07Ozs7SUFKUCxrREFBbUY7O0lBQ25GLHlDQUFvQjs7SUFDcEIscUNBQXdCOztJQUN4QixpQ0FBWTs7SUFDWiwwQ0FBbUY7O0lBQ25GLHFDQUErQzs7SUFDL0Msb0NBQXdEOztJQUN4RCx3Q0FBeUI7O0lBQ3pCLDBEQUFrRDs7SUFDbEQsb0RBQXNDOztJQUN0Qyx1REFBb0Q7O0lBQ3BELDRDQUEwQjs7SUFDMUIsd0NBQXNCOztJQUN0Qiw2Q0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIFZpZXdDaGlsZCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICcuLi8uLic7XG5pbXBvcnQgeyBEZWZhdWx0Q29uZmlnU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2NvbmZpZy1zZXJ2aWNlJztcbmltcG9ydCB7IFBhZ2luYXRpb25Db250cm9sc0RpcmVjdGl2ZSB9IGZyb20gJ25neC1wYWdpbmF0aW9uJztcblxuZXhwb3J0IGludGVyZmFjZSBQYWdpbmF0aW9uUmFuZ2Uge1xuICBwYWdlOiBudW1iZXI7XG4gIGxpbWl0OiBudW1iZXI7XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BhZ2luYXRpb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vcGFnaW5hdGlvbi5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFBhZ2luYXRpb25Db21wb25lbnQge1xuICBAVmlld0NoaWxkKCdwYWdpbmF0aW9uRGlyZWN0aXZlJykgcGFnaW5hdGlvbkRpcmVjdGl2ZTogUGFnaW5hdGlvbkNvbnRyb2xzRGlyZWN0aXZlO1xuICBASW5wdXQoKSBwYWdpbmF0aW9uO1xuICBASW5wdXQoKSBjb25maWc6IENvbmZpZztcbiAgQElucHV0KCkgaWQ7XG4gIEBPdXRwdXQoKSByZWFkb25seSB1cGRhdGVSYW5nZTogRXZlbnRFbWl0dGVyPFBhZ2luYXRpb25SYW5nZT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIHB1YmxpYyByYW5nZXM6IG51bWJlcltdID0gWzUsIDEwLCAyNSwgNTAsIDEwMF07XG4gIHB1YmxpYyBsaW1pdDogbnVtYmVyID0gRGVmYXVsdENvbmZpZ1NlcnZpY2UuY29uZmlnLnJvd3M7XG4gIHB1YmxpYyBzaG93UmFuZ2UgPSBmYWxzZTtcbiAgcHVibGljIHNjcmVlblJlYWRlclBhZ2luYXRpb25MYWJlbCA9ICdQYWdpbmF0aW9uJztcbiAgcHVibGljIHNjcmVlblJlYWRlclBhZ2VMYWJlbCA9ICdwYWdlJztcbiAgcHVibGljIHNjcmVlblJlYWRlckN1cnJlbnRMYWJlbCA9ICdZb3UgYXJlIG9uIHBhZ2UnO1xuICBwdWJsaWMgcHJldmlvdXNMYWJlbCA9ICcnO1xuICBwdWJsaWMgbmV4dExhYmVsID0gJyc7XG4gIHB1YmxpYyBkaXJlY3Rpb25MaW5rcyA9IHRydWU7XG5cbiAgb25QYWdlQ2hhbmdlKHBhZ2U6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMudXBkYXRlUmFuZ2UuZW1pdCh7XG4gICAgICBwYWdlLFxuICAgICAgbGltaXQ6IHRoaXMubGltaXQsXG4gICAgfSk7XG4gIH1cblxuICBjaGFuZ2VMaW1pdChsaW1pdDogbnVtYmVyLCBjYWxsRnJvbUFQSTogYm9vbGVhbik6IHZvaWQge1xuICAgIGlmICghY2FsbEZyb21BUEkpIHtcbiAgICAgIHRoaXMuc2hvd1JhbmdlID0gIXRoaXMuc2hvd1JhbmdlO1xuICAgIH1cbiAgICB0aGlzLmxpbWl0ID0gbGltaXQ7XG4gICAgdGhpcy51cGRhdGVSYW5nZS5lbWl0KHtcbiAgICAgIHBhZ2U6IDEsXG4gICAgICBsaW1pdCxcbiAgICB9KTtcbiAgfVxuXG59XG4iXX0=