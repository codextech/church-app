/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
/**
 * From version 5.0 CsvExportComponent will be deprecated,
 * and from version 6.0 moved to CsvExportComponent plugin
 */
export class CsvExportComponent {
    /**
     * @return {?}
     */
    exportCsv() {
        /** @type {?} */
        const data = this.data;
        /** @type {?} */
        let csvContent = 'data:text/csv;charset=utf-8,';
        /** @type {?} */
        let dataString = '';
        /** @type {?} */
        const x = [];
        /** @type {?} */
        const keys = Object.keys(this.data[0]);
        data.forEach((/**
         * @param {?} row
         * @param {?} index
         * @return {?}
         */
        (row, index) => {
            x[index] = [];
            keys.forEach((/**
             * @param {?} i
             * @return {?}
             */
            (i) => {
                if (row.hasOwnProperty(i)) {
                    if (typeof row[i] === 'object') {
                        row[i] = 'Object'; // so far just change object to "Object" string
                    }
                    x[index].push(row[i]);
                }
            }));
        }));
        csvContent += keys + '\n';
        x.forEach((/**
         * @param {?} row
         * @param {?} index
         * @return {?}
         */
        (row, index) => {
            dataString = row.join(',');
            csvContent += index < data.length ? dataString + '\n' : dataString;
        }));
        /** @type {?} */
        const encodedUri = encodeURI(csvContent);
        /** @type {?} */
        const link = document.createElement('a');
        link.setAttribute('href', encodedUri);
        link.setAttribute('download', 'my_data.csv');
        link.click();
    }
}
CsvExportComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-csv-export',
                template: `
    <a (click)="exportCsv()" class="ngx-menu-item">
      CSV export
    </a>`
            }] }
];
CsvExportComponent.propDecorators = {
    data: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    CsvExportComponent.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3N2LWV4cG9ydC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZWFzeS10YWJsZS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2Nzdi1leHBvcnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQVVqRDs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sa0JBQWtCOzs7O0lBR3RCLFNBQVM7O2NBQ1IsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJOztZQUNsQixVQUFVLEdBQUcsOEJBQThCOztZQUMzQyxVQUFVLEdBQUcsRUFBRTs7Y0FDYixDQUFDLEdBQVUsRUFBRTs7Y0FDYixJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxPQUFPOzs7OztRQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQzFCLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxJQUFJLENBQUMsT0FBTzs7OztZQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2pCLElBQUksR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDekIsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLEVBQUU7d0JBQzlCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQywrQ0FBK0M7cUJBQ25FO29CQUNELENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3ZCO1lBQ0gsQ0FBQyxFQUFDLENBQUM7UUFDTCxDQUFDLEVBQUMsQ0FBQztRQUVILFVBQVUsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQzFCLENBQUMsQ0FBQyxPQUFPOzs7OztRQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ3ZCLFVBQVUsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzNCLFVBQVUsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO1FBQ3JFLENBQUMsRUFBQyxDQUFDOztjQUNHLFVBQVUsR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDOztjQUNsQyxJQUFJLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUM7UUFDeEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFFN0MsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2YsQ0FBQzs7O1lBNUNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQixRQUFRLEVBQUU7OztTQUdIO2FBQ1I7OzttQkFPRSxLQUFLOzs7O0lBQU4sa0NBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FwcC1jc3YtZXhwb3J0JyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8YSAoY2xpY2spPVwiZXhwb3J0Q3N2KClcIiBjbGFzcz1cIm5neC1tZW51LWl0ZW1cIj5cbiAgICAgIENTViBleHBvcnRcbiAgICA8L2E+YCxcbn0pXG5cbi8qKlxuICogRnJvbSB2ZXJzaW9uIDUuMCBDc3ZFeHBvcnRDb21wb25lbnQgd2lsbCBiZSBkZXByZWNhdGVkLFxuICogYW5kIGZyb20gdmVyc2lvbiA2LjAgbW92ZWQgdG8gQ3N2RXhwb3J0Q29tcG9uZW50IHBsdWdpblxuICovXG5leHBvcnQgY2xhc3MgQ3N2RXhwb3J0Q29tcG9uZW50IHtcbiAgQElucHV0KCkgZGF0YTtcblxuICBwdWJsaWMgZXhwb3J0Q3N2KCkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgbGV0IGNzdkNvbnRlbnQgPSAnZGF0YTp0ZXh0L2NzdjtjaGFyc2V0PXV0Zi04LCc7XG4gICAgbGV0IGRhdGFTdHJpbmcgPSAnJztcbiAgICBjb25zdCB4OiBhbnlbXSA9IFtdO1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0aGlzLmRhdGFbMF0pO1xuICAgIGRhdGEuZm9yRWFjaCgocm93LCBpbmRleCkgPT4ge1xuICAgICAgeFtpbmRleF0gPSBbXTtcbiAgICAgIGtleXMuZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgICBpZiAocm93Lmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiByb3dbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByb3dbaV0gPSAnT2JqZWN0JzsgLy8gc28gZmFyIGp1c3QgY2hhbmdlIG9iamVjdCB0byBcIk9iamVjdFwiIHN0cmluZ1xuICAgICAgICAgIH1cbiAgICAgICAgICB4W2luZGV4XS5wdXNoKHJvd1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgY3N2Q29udGVudCArPSBrZXlzICsgJ1xcbic7XG4gICAgeC5mb3JFYWNoKChyb3csIGluZGV4KSA9PiB7XG4gICAgICBkYXRhU3RyaW5nID0gcm93LmpvaW4oJywnKTtcbiAgICAgIGNzdkNvbnRlbnQgKz0gaW5kZXggPCBkYXRhLmxlbmd0aCA/IGRhdGFTdHJpbmcgKyAnXFxuJyA6IGRhdGFTdHJpbmc7XG4gICAgfSk7XG4gICAgY29uc3QgZW5jb2RlZFVyaSA9IGVuY29kZVVSSShjc3ZDb250ZW50KTtcbiAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIGxpbmsuc2V0QXR0cmlidXRlKCdocmVmJywgZW5jb2RlZFVyaSk7XG4gICAgbGluay5zZXRBdHRyaWJ1dGUoJ2Rvd25sb2FkJywgJ215X2RhdGEuY3N2Jyk7XG5cbiAgICBsaW5rLmNsaWNrKCk7XG4gIH1cbn1cbiJdfQ==