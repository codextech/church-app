/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
export class StyleService {
    /**
     * @param {?} val
     * @return {?}
     */
    static setRowClass(val) {
        /** @type {?} */
        const selector = `#table > tbody > tr:nth-child(${val.row})`;
        /** @type {?} */
        const row = document.querySelector(selector);
        if (row) {
            row.className = val.className;
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    static setCellClass(val) {
        /** @type {?} */
        const selector = `#table > tbody > tr:nth-child(${val.row}) > td:nth-child(${val.cell})`;
        /** @type {?} */
        const cell = document.querySelector(selector);
        if (cell) {
            cell.className = val.className;
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    static setRowStyle(val) {
        /** @type {?} */
        const selector = `#table > tbody > tr:nth-child(${val.row})`;
        /** @type {?} */
        const row = document.querySelector(selector);
        if (row) {
            // tslint:disable-next-line:no-string-literal
            row.style[val.attr] = val.value;
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    static setCellStyle(val) {
        /** @type {?} */
        const selector = `#table > tbody > tr:nth-child(${val.row}) > td:nth-child(${val.cell})`;
        /** @type {?} */
        const cell = document.querySelector(selector);
        if (cell) {
            // tslint:disable-next-line:no-string-literal
            cell.style[val.attr] = val.value;
        }
    }
}
StyleService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1lYXN5LXRhYmxlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3N0eWxlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJM0MsTUFBTSxPQUFPLFlBQVk7Ozs7O0lBQ3ZCLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBYTs7Y0FDeEIsUUFBUSxHQUFHLGlDQUFpQyxHQUFHLENBQUMsR0FBRyxHQUFHOztjQUN0RCxHQUFHLEdBQXdCLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO1FBQ2pFLElBQUksR0FBRyxFQUFFO1lBQ1AsR0FBRyxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDO1NBQy9CO0lBQ0gsQ0FBQzs7Ozs7SUFFRCxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQWM7O2NBQzFCLFFBQVEsR0FBRyxpQ0FBaUMsR0FBRyxDQUFDLEdBQUcsb0JBQW9CLEdBQUcsQ0FBQyxJQUFJLEdBQUc7O2NBQ2xGLElBQUksR0FBeUIsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7UUFDbkUsSUFBSSxJQUFJLEVBQUU7WUFDUixJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUM7U0FDaEM7SUFDSCxDQUFDOzs7OztJQUVELE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBYTs7Y0FDeEIsUUFBUSxHQUFHLGlDQUFpQyxHQUFHLENBQUMsR0FBRyxHQUFHOztjQUN0RCxHQUFHLEdBQXdCLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO1FBQ2pFLElBQUksR0FBRyxFQUFFO1lBQ1AsNkNBQTZDO1lBQzdDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7U0FDakM7SUFDSCxDQUFDOzs7OztJQUVELE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBYzs7Y0FDMUIsUUFBUSxHQUFHLGlDQUFpQyxHQUFHLENBQUMsR0FBRyxvQkFBb0IsR0FBRyxDQUFDLElBQUksR0FBRzs7Y0FDbEYsSUFBSSxHQUF5QixRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztRQUNuRSxJQUFJLElBQUksRUFBRTtZQUNSLDZDQUE2QztZQUM3QyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO1NBQ2xDO0lBQ0gsQ0FBQzs7O1lBbENGLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyByb3dDbGFzcywgcm93U3R5bGUsIGNlbGxDbGFzcywgY2VsbFN0eWxlIH0gZnJvbSAnLi4vbW9kZWwvYXBpJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFN0eWxlU2VydmljZSB7XG4gIHN0YXRpYyBzZXRSb3dDbGFzcyh2YWw6IHJvd0NsYXNzKTogdm9pZCB7XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBgI3RhYmxlID4gdGJvZHkgPiB0cjpudGgtY2hpbGQoJHt2YWwucm93fSlgO1xuICAgIGNvbnN0IHJvdzogSFRNTFRhYmxlUm93RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIGlmIChyb3cpIHtcbiAgICAgIHJvdy5jbGFzc05hbWUgPSB2YWwuY2xhc3NOYW1lO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBzZXRDZWxsQ2xhc3ModmFsOiBjZWxsQ2xhc3MpOiB2b2lkIHtcbiAgICBjb25zdCBzZWxlY3RvciA9IGAjdGFibGUgPiB0Ym9keSA+IHRyOm50aC1jaGlsZCgke3ZhbC5yb3d9KSA+IHRkOm50aC1jaGlsZCgke3ZhbC5jZWxsfSlgO1xuICAgIGNvbnN0IGNlbGw6IEhUTUxUYWJsZUNlbGxFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgaWYgKGNlbGwpIHtcbiAgICAgIGNlbGwuY2xhc3NOYW1lID0gdmFsLmNsYXNzTmFtZTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgc2V0Um93U3R5bGUodmFsOiByb3dTdHlsZSk6IHZvaWQge1xuICAgIGNvbnN0IHNlbGVjdG9yID0gYCN0YWJsZSA+IHRib2R5ID4gdHI6bnRoLWNoaWxkKCR7dmFsLnJvd30pYDtcbiAgICBjb25zdCByb3c6IEhUTUxUYWJsZVJvd0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICBpZiAocm93KSB7XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tc3RyaW5nLWxpdGVyYWxcbiAgICAgIHJvdy5zdHlsZVt2YWwuYXR0cl0gPSB2YWwudmFsdWU7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHNldENlbGxTdHlsZSh2YWw6IGNlbGxTdHlsZSk6IHZvaWQge1xuICAgIGNvbnN0IHNlbGVjdG9yID0gYCN0YWJsZSA+IHRib2R5ID4gdHI6bnRoLWNoaWxkKCR7dmFsLnJvd30pID4gdGQ6bnRoLWNoaWxkKCR7dmFsLmNlbGx9KWA7XG4gICAgY29uc3QgY2VsbDogSFRNTFRhYmxlQ2VsbEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICBpZiAoY2VsbCkge1xuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXN0cmluZy1saXRlcmFsXG4gICAgICBjZWxsLnN0eWxlW3ZhbC5hdHRyXSA9IHZhbC52YWx1ZTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==