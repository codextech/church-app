/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { from } from 'rxjs';
import { flatMap, groupBy, reduce } from 'rxjs/operators';
export class GroupRowsService {
    /**
     * @template T
     * @param {?} data
     * @param {?} groupRowsBy
     * @return {?}
     */
    static doGroupRows(data, groupRowsBy) {
        /** @type {?} */
        const grouped = [];
        from(data).pipe(groupBy((/**
         * @param {?} row
         * @return {?}
         */
        (row) => row[groupRowsBy])), flatMap((/**
         * @param {?} group
         * @return {?}
         */
        (group) => group.pipe(reduce((/**
         * @param {?} acc
         * @param {?} curr
         * @return {?}
         */
        (acc, curr) => [...acc, curr]), []))))).subscribe((/**
         * @param {?} row
         * @return {?}
         */
        (row) => grouped.push(row)));
        return grouped;
    }
}
GroupRowsService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAtcm93cy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWVhc3ktdGFibGUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvZ3JvdXAtcm93cy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDNUIsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHMUQsTUFBTSxPQUFPLGdCQUFnQjs7Ozs7OztJQUNwQixNQUFNLENBQUMsV0FBVyxDQUFJLElBQVMsRUFBRSxXQUFXOztjQUMzQyxPQUFPLEdBQUcsRUFBRTtRQUNsQixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUNiLE9BQU87Ozs7UUFBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFDLEVBQ2xDLE9BQU87Ozs7UUFBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDM0IsTUFBTTs7Ozs7UUFBQyxDQUFDLEdBQVEsRUFBRSxJQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUUsRUFBRSxDQUFDLENBQ2xELEVBQUMsQ0FDSCxDQUFDLFNBQVM7Ozs7UUFBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDO1FBRXhDLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7OztZQVpGLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmcm9tIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmbGF0TWFwLCBncm91cEJ5LCByZWR1Y2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBHcm91cFJvd3NTZXJ2aWNlIHtcbiAgcHVibGljIHN0YXRpYyBkb0dyb3VwUm93czxUPihkYXRhOiBUW10sIGdyb3VwUm93c0J5KSB7XG4gICAgY29uc3QgZ3JvdXBlZCA9IFtdO1xuICAgIGZyb20oZGF0YSkucGlwZShcbiAgICAgIGdyb3VwQnkoKHJvdykgPT4gcm93W2dyb3VwUm93c0J5XSksXG4gICAgICBmbGF0TWFwKChncm91cCkgPT4gZ3JvdXAucGlwZShcbiAgICAgICAgcmVkdWNlKChhY2M6IFRbXSwgY3VycjogVCkgPT4gWy4uLmFjYywgY3Vycl0sIFtdKSxcbiAgICAgICkpLFxuICAgICkuc3Vic2NyaWJlKChyb3cpID0+IGdyb3VwZWQucHVzaChyb3cpKTtcblxuICAgIHJldHVybiBncm91cGVkO1xuICB9XG59XG4iXX0=