import { CdkDragDrop } from '@angular/cdk/drag-drop';
import { ChangeDetectorRef, EventEmitter, OnChanges, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { Columns, Config, Pagination, ColumnKeyType, ApiType } from '../..';
import { PaginationRange } from '../pagination/pagination.component';
interface RowContextMenuPosition {
    top: string | null;
    left: string | null;
    value: any | null;
}
export declare class BaseComponent implements OnInit, OnChanges {
    private readonly cdr;
    private paginationComponent;
    private th;
    selectedRow: number;
    selectedCol: number;
    term: any;
    tableClass: any;
    globalSearchTerm: string;
    grouped: any;
    menuActive: boolean;
    isSelected: boolean;
    page: number;
    count: any;
    sortState: Map<any, any>;
    sortKey: any;
    rowContextMenuPosition: RowContextMenuPosition;
    limit: any;
    sortBy: {
        key: string;
    } & {
        order: string;
    };
    selectedDetailsTemplateRowId: Set<any>;
    startOffset: any;
    loadingHeight: string;
    config: Config;
    onSelectAllBinded: () => void;
    configuration: Config;
    data: any[];
    pagination: Pagination;
    groupRowsBy: string;
    id: string;
    toggleRowIndex: any;
    detailsTemplate: TemplateRef<any>;
    summaryTemplate: TemplateRef<any>;
    groupRowsHeaderTemplate: TemplateRef<any>;
    filtersTemplate: TemplateRef<any>;
    selectAllTemplate: TemplateRef<any>;
    noResultsTemplate: TemplateRef<any>;
    rowContextMenu: TemplateRef<any>;
    columns: Columns[];
    readonly event: EventEmitter<{
        event: string;
        value: any;
    }>;
    rowTemplate: TemplateRef<any>;
    constructor(cdr: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    isOrderEnabled(column: Columns): boolean;
    orderBy(column: Columns): void;
    onClick($event: MouseEvent, row: object, key: ColumnKeyType, colIndex: number | null, rowIndex: number): void;
    onDoubleClick($event: MouseEvent, row: object, key: ColumnKeyType, colIndex: number | null, rowIndex: number): void;
    onCheckboxSelect($event: object, row: object, rowIndex: number): void;
    onSelectAll(): void;
    onSearch($event: Array<{
        key: string;
        value: string;
    }>): void;
    onGlobalSearch(value: string): void;
    onPagination(pagination: PaginationRange): void;
    private emitEvent;
    collapseRow(rowIndex: number): void;
    private doDecodePersistedState;
    isRowCollapsed(rowIndex: number): boolean;
    onMouseDown(event: any, th: any): void;
    onMouseMove(event: any): void;
    onMouseUp(event: any): void;
    readonly isLoading: boolean;
    getLoadingHeight(rows: any): void;
    getColumnWidth(column: any): string | null;
    getColumnDefinition(column: Columns): boolean;
    readonly arrowDefinition: boolean;
    onRowContextMenu($event: MouseEvent, row: object, key: ColumnKeyType, colIndex: number | null, rowIndex: number): void;
    private doApplyData;
    onDrop(event: CdkDragDrop<string[]>): void;
    apiEvent(event: ApiType): void | number;
    private bindApi;
    private setColumnOrder;
}
export {};
